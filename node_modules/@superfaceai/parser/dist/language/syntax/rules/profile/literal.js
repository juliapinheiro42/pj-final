"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.COMLINK_LITERAL = exports.COMLINK_LIST_LITERAL = exports.COMLINK_OBJECT_LITERAL = exports.COMLINK_OBJECT_LITERAL_ASSIGNMENT = exports.COMLINK_PRIMITIVE_LITERAL = void 0;
var rule_1 = require("../../rule");
var common_1 = require("../common");
exports.COMLINK_PRIMITIVE_LITERAL = rule_1.SyntaxRule.literal()
    .or(rule_1.SyntaxRule.string())
    .map(function (match) {
    var value = match.data.kind === 3 /* LITERAL */
        ? match.data.literal
        : match.data.string;
    return {
        kind: 'ComlinkPrimitiveLiteral',
        value: value,
        location: match.location,
    };
});
var COMLINK_LITERAL_MUT = new rule_1.SyntaxRuleMutable();
exports.COMLINK_OBJECT_LITERAL_ASSIGNMENT = common_1.documentedNode(common_1.ASSIGNMENT_PATH_KEY.followedBy(rule_1.SyntaxRule.operator('=').forgetFollowedBy(common_1.expectTerminated(COMLINK_LITERAL_MUT, ',', '\n', '}'))).map(function (_a) {
    var _b = __read(_a, 2), path = _b[0], value = _b[1];
    return {
        kind: 'ComlinkAssignment',
        key: common_1.mapAssignmentPath(path),
        value: value,
        location: common_1.computeLocationSpan.apply(void 0, __spreadArray(__spreadArray([], __read(path)), [value])),
    };
}));
exports.COMLINK_OBJECT_LITERAL = rule_1.SyntaxRule.separator('{')
    .followedBy(rule_1.SyntaxRule.optional(rule_1.SyntaxRule.repeat(exports.COMLINK_OBJECT_LITERAL_ASSIGNMENT)))
    .andFollowedBy(rule_1.SyntaxRule.separator('}'))
    .map(function (_a) {
    var _b = __read(_a, 3), sepStart = _b[0], maybeFields = _b[1], sepEnd = _b[2];
    return {
        kind: 'ComlinkObjectLiteral',
        fields: maybeFields !== null && maybeFields !== void 0 ? maybeFields : [],
        location: common_1.computeLocationSpan(sepStart, sepEnd),
    };
});
exports.COMLINK_LIST_LITERAL = rule_1.SyntaxRule.separator('[')
    .followedBy(rule_1.SyntaxRule.optional(rule_1.SyntaxRule.repeat(common_1.expectTerminated(COMLINK_LITERAL_MUT, ',', '\n', ']'))))
    .andFollowedBy(rule_1.SyntaxRule.separator(']'))
    .map(function (_a) {
    var _b = __read(_a, 3), sepStart = _b[0], maybeItems = _b[1], sepEnd = _b[2];
    return {
        kind: 'ComlinkListLiteral',
        items: maybeItems !== null && maybeItems !== void 0 ? maybeItems : [],
        location: common_1.computeLocationSpan(sepStart, sepEnd),
    };
});
exports.COMLINK_LITERAL = exports.COMLINK_PRIMITIVE_LITERAL.or(exports.COMLINK_OBJECT_LITERAL).or(exports.COMLINK_LIST_LITERAL);
COMLINK_LITERAL_MUT.rule = exports.COMLINK_LITERAL;
//# sourceMappingURL=literal.js.map