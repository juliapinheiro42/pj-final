"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxRuleFeatureOr = exports.SyntaxRuleFeatureSubstitute = exports.allFeatures = exports.parseEnvFeatures = exports.isFeature = exports.PARSER_FEATURES = void 0;
var rule_1 = require("./rule");
exports.PARSER_FEATURES = {
    nested_object_literals: false,
    shorthand_http_request_slots: false,
    multiple_security_schemes: false,
};
function isFeature(input) {
    return input in exports.PARSER_FEATURES;
}
exports.isFeature = isFeature;
function parseEnvFeatures() {
    var _a;
    (_a = process.env['SLANG_FEATURES']) === null || _a === void 0 ? void 0 : _a.split(',').forEach(function (ft) {
        var feature = ft.trim();
        var disable = feature.startsWith('!');
        if (disable) {
            feature = feature.slice(1);
        }
        if (isFeature(feature)) {
            exports.PARSER_FEATURES[feature] = !disable;
        }
    });
}
exports.parseEnvFeatures = parseEnvFeatures;
/**
 * Returns an array of all features.
 */
function allFeatures() {
    return Object.keys(exports.PARSER_FEATURES);
}
exports.allFeatures = allFeatures;
var SyntaxRuleFeatureSubstitute = /** @class */ (function (_super) {
    __extends(SyntaxRuleFeatureSubstitute, _super);
    /**
     * If at runtime feature `feature` is enabled, acts as `enabled`, otherwise acts as `base`.
     */
    function SyntaxRuleFeatureSubstitute(base, feature, enabled) {
        var _this = _super.call(this) || this;
        _this.base = base;
        _this.feature = feature;
        _this.enabled = enabled;
        _this.lastExecutionFeatureState = exports.PARSER_FEATURES[_this.feature];
        return _this;
    }
    SyntaxRuleFeatureSubstitute.prototype.tryMatch = function (tokens) {
        this.lastExecutionFeatureState = exports.PARSER_FEATURES[this.feature];
        if (this.lastExecutionFeatureState) {
            return this.enabled.tryMatch(tokens);
        }
        else {
            return this.base.tryMatch(tokens);
        }
    };
    SyntaxRuleFeatureSubstitute.prototype[Symbol.toStringTag] = function () {
        if (this.lastExecutionFeatureState) {
            return this.enabled.toString();
        }
        else {
            return this.base.toString();
        }
    };
    return SyntaxRuleFeatureSubstitute;
}(rule_1.SyntaxRule));
exports.SyntaxRuleFeatureSubstitute = SyntaxRuleFeatureSubstitute;
/**
 * Combined two rules using `or` if feature is enabled.
 */
var SyntaxRuleFeatureOr = /** @class */ (function (_super) {
    __extends(SyntaxRuleFeatureOr, _super);
    /**
     * If at runtime feature `feature` is enabled, acts as `base.or(enabled)`, otherwise
     * acts as `base`.
     */
    function SyntaxRuleFeatureOr(base, feature) {
        var enabled = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            enabled[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.base = base;
        _this.feature = feature;
        _this.orRule = rule_1.SyntaxRuleOr.chainOr.apply(rule_1.SyntaxRuleOr, __spreadArray([base], __read(enabled)));
        _this.lastExecutionFeatureState = exports.PARSER_FEATURES[_this.feature];
        return _this;
    }
    SyntaxRuleFeatureOr.prototype.tryMatch = function (tokens) {
        this.lastExecutionFeatureState = exports.PARSER_FEATURES[this.feature];
        if (this.lastExecutionFeatureState) {
            return this.orRule.tryMatch(tokens);
        }
        else {
            return this.base.tryMatch(tokens);
        }
    };
    SyntaxRuleFeatureOr.prototype[Symbol.toStringTag] = function () {
        if (this.lastExecutionFeatureState) {
            return this.orRule.toString();
        }
        else {
            return this.base.toString();
        }
    };
    return SyntaxRuleFeatureOr;
}(rule_1.SyntaxRule));
exports.SyntaxRuleFeatureOr = SyntaxRuleFeatureOr;
//# sourceMappingURL=features.js.map