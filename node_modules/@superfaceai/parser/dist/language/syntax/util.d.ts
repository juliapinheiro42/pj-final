import { LexerContext, LexerToken, LexerTokenStream } from '../lexer';
import { LexerTokenKindFilter } from '../lexer/lexer';
import { Source } from '../source';
/**
 * LexerTokenStream implementation that takes tokens from an array instead of a Lexer.
 *
 * This is mostly used in tests.
 */
export declare class ArrayLexerStream implements LexerTokenStream<number> {
    private readonly array;
    private index;
    tokenKindFilter: LexerTokenKindFilter;
    readonly source: Source;
    constructor(array: ReadonlyArray<LexerToken>);
    next(context?: LexerContext): IteratorResult<LexerToken, undefined>;
    peek(context?: LexerContext): IteratorResult<LexerToken, undefined>;
    save(): number;
    rollback(state: number): void;
    return(value: undefined): IteratorResult<LexerToken, undefined>;
    throw(e: unknown): IteratorResult<LexerToken, undefined>;
    [Symbol.iterator](): Generator<LexerToken, undefined, LexerContext | undefined>;
}
/**
 * Attempts to extract documentation title and description from string value.
 *
 * Empty string returns an empty object.
 *
 * String with only one line return that line as the title.
 *
 * String with at least two lines returns the first line as the title and the rest as the description.
 */
export declare function extractDocumentation(input?: string): {
    title: string;
    description?: string;
} | undefined;
