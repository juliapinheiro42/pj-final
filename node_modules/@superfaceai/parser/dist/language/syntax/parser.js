"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseMap = exports.parseProfile = exports.parseRule = exports.parseRuleResult = void 0;
var error_1 = require("../error");
var lexer_1 = require("../lexer/lexer");
var mapRules = __importStar(require("./rules/map"));
var profileRules = __importStar(require("./rules/profile"));
function parseRuleResult(rule, source, skipSOF) {
    var lexer = new lexer_1.Lexer(source);
    if (skipSOF === true) {
        lexer.next();
    }
    var result = rule.tryMatch(lexer);
    if (result.kind === 'match') {
        return { kind: 'success', value: result.match };
    }
    else {
        var error = error_1.SyntaxError.fromSyntaxRuleNoMatch(source, result);
        // print the formatted error on debug log level
        if (process.env.LOG_LEVEL === 'debug') {
            console.debug(error.format());
        }
        return {
            kind: 'failure',
            error: error,
        };
    }
}
exports.parseRuleResult = parseRuleResult;
/**
 * Attempts to match `rule` onto `source`.
 *
 * If `skipSOF === true`, the first token of the newly created lexer token stream (the SOF token)
 * is skipped.
 *
 * Internally this function calls `parseRuleResult` and throws the error.
 */
function parseRule(rule, source, skipSOF) {
    var result = parseRuleResult(rule, source, skipSOF);
    if (result.kind === 'failure') {
        throw result.error;
    }
    return result.value;
}
exports.parseRule = parseRule;
/**
 * Equivalent to calling `parseRule(profileRules.PROFILE_DOCUMENT, source)` but isn't required to return location info.
 */
function parseProfile(source) {
    return parseRule(profileRules.PROFILE_DOCUMENT, source);
}
exports.parseProfile = parseProfile;
/**
 * Equivalent to calling `parseRule(mapRules.MAP_DOCUMENT, source);` but isn't required to return location info.
 */
function parseMap(source) {
    return parseRule(mapRules.MAP_DOCUMENT, source);
}
exports.parseMap = parseMap;
//# sourceMappingURL=parser.js.map