"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractDocumentation = exports.ArrayLexerStream = void 0;
var lexer_1 = require("../lexer/lexer");
var source_1 = require("../source");
/**
 * LexerTokenStream implementation that takes tokens from an array instead of a Lexer.
 *
 * This is mostly used in tests.
 */
var ArrayLexerStream = /** @class */ (function () {
    function ArrayLexerStream(array) {
        this.array = array;
        this.index = 0;
        this.tokenKindFilter = lexer_1.DEFAULT_TOKEN_KIND_FILTER;
        this.source = new source_1.Source(array.map(function (token) { return token.toStringDebug(); }).join('\n'));
    }
    ArrayLexerStream.prototype.next = function (context) {
        if (this.index >= this.array.length) {
            return {
                done: true,
                value: undefined,
            };
        }
        var token = this.array[this.index];
        var result = {
            done: false,
            value: token,
        };
        this.index += 1;
        if (this.tokenKindFilter[token.data.kind]) {
            // Recurse
            result = this.next(context);
        }
        return result;
    };
    ArrayLexerStream.prototype.peek = function (context) {
        var originalIndex = this.index;
        var result = this.next(context);
        this.index = originalIndex;
        return result;
    };
    ArrayLexerStream.prototype.save = function () {
        return this.index;
    };
    ArrayLexerStream.prototype.rollback = function (state) {
        this.index = state;
    };
    ArrayLexerStream.prototype.return = function (value) {
        return {
            done: true,
            value: value,
        };
    };
    ArrayLexerStream.prototype.throw = function (e) {
        throw e;
    };
    ArrayLexerStream.prototype[Symbol.iterator] = function () {
        return this;
    };
    return ArrayLexerStream;
}());
exports.ArrayLexerStream = ArrayLexerStream;
/**
 * Attempts to extract documentation title and description from string value.
 *
 * Empty string returns an empty object.
 *
 * String with only one line return that line as the title.
 *
 * String with at least two lines returns the first line as the title and the rest as the description.
 */
function extractDocumentation(input) {
    if (input === undefined) {
        return undefined;
    }
    var lines = input.split('\n');
    var firstNonemptyLineIndex = lines.findIndex(function (line) { return line.trim() !== ''; });
    // No non-whitespace found
    if (firstNonemptyLineIndex === -1) {
        return undefined;
    }
    var title = lines[firstNonemptyLineIndex].trim();
    var descriptionStart = lines
        .slice(0, firstNonemptyLineIndex + 1)
        .reduce(function (acc, curr) { return (acc += curr.length); }, 0) + firstNonemptyLineIndex;
    var description = input.slice(descriptionStart).trim();
    if (description !== '') {
        return {
            title: title,
            description: description,
        };
    }
    else {
        // description is only whitespace
        return {
            title: title,
        };
    }
}
exports.extractDocumentation = extractDocumentation;
//# sourceMappingURL=util.js.map