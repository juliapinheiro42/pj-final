"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryParseComment = exports.tryParseIdentifier = exports.tryParseBooleanLiteral = exports.tryParseOperator = exports.tryParseSeparator = void 0;
var token_1 = require("../../token");
var util = __importStar(require("../../util"));
function tryParseScannerRules(slice, rules) {
    var e_1, _a;
    var result = undefined;
    try {
        for (var _b = __values(Object.entries(rules)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], _e = __read(_d[1], 2), word = _e[0], predicate = _e[1];
            result = util.tryKeywordLiteral(slice, key, word, predicate);
            if (result) {
                break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
/**
 * Tries to parse a separator token at current position.
 *
 * Returns nomatch if the current position cannot contain a separator.
 */
function tryParseSeparator(slice) {
    // Handle EOF
    if (slice.length === 0) {
        return {
            kind: 'match',
            data: {
                kind: 1 /* SEPARATOR */,
                separator: 'EOF',
            },
            relativeSpan: { start: 0, end: 0 },
        };
    }
    var parsed = tryParseScannerRules(slice, token_1.SEPARATORS);
    if (parsed === undefined) {
        return {
            kind: 'nomatch',
            tokenKind: 1 /* SEPARATOR */,
        };
    }
    return {
        kind: 'match',
        data: {
            kind: 1 /* SEPARATOR */,
            separator: parsed.value,
        },
        relativeSpan: { start: 0, end: parsed.length },
    };
}
exports.tryParseSeparator = tryParseSeparator;
/**
 * Tries to parse an operator token at current position.
 *
 * Returns nomatch if the current position cannot contain an operator.
 */
function tryParseOperator(slice) {
    var parsed = tryParseScannerRules(slice, token_1.OPERATORS);
    if (parsed === undefined) {
        return {
            kind: 'nomatch',
            tokenKind: 2 /* OPERATOR */,
        };
    }
    return {
        kind: 'match',
        data: {
            kind: 2 /* OPERATOR */,
            operator: parsed.value,
        },
        relativeSpan: { start: 0, end: parsed.length },
    };
}
exports.tryParseOperator = tryParseOperator;
function tryParseBooleanLiteral(slice) {
    var parsed = tryParseScannerRules(slice, token_1.LITERALS_BOOL);
    if (parsed === undefined) {
        return {
            kind: 'nomatch',
            tokenKind: 3 /* LITERAL */,
        };
    }
    return {
        kind: 'match',
        data: {
            kind: 3 /* LITERAL */,
            literal: parsed.value,
        },
        relativeSpan: { start: 0, end: parsed.length },
    };
}
exports.tryParseBooleanLiteral = tryParseBooleanLiteral;
/**
 * Tries to parse an identifier token at current position.
 *
 * Returns nomatch if the current position cannot contain an identifier.
 */
function tryParseIdentifier(slice) {
    if (!util.isValidIdentifierStartChar(slice.charCodeAt(0))) {
        return {
            kind: 'nomatch',
            tokenKind: 5 /* IDENTIFIER */,
        };
    }
    var identLength = util.countStartingIdentifierChars(slice);
    if (identLength === 0) {
        return {
            kind: 'nomatch',
            tokenKind: 5 /* IDENTIFIER */,
        };
    }
    return {
        kind: 'match',
        data: {
            kind: 5 /* IDENTIFIER */,
            identifier: slice.slice(0, identLength),
        },
        relativeSpan: { start: 0, end: identLength },
    };
}
exports.tryParseIdentifier = tryParseIdentifier;
/**
 * Tries to parse a comment token at current position.
 *
 * Returns nomatch if the current position cannot contain a comment.
 */
function tryParseComment(slice) {
    var prefix = tryParseScannerRules(slice, { '//': ['//', util.isAny] });
    if (prefix === undefined) {
        return {
            kind: 'nomatch',
            tokenKind: 6 /* COMMENT */,
        };
    }
    var commentSlice = slice.slice(prefix.length);
    var bodyLength = util.countStarting(function (char) { return !util.isNewline(char); }, commentSlice);
    return {
        kind: 'match',
        data: {
            kind: 6 /* COMMENT */,
            comment: commentSlice.slice(0, bodyLength),
        },
        relativeSpan: { start: 0, end: prefix.length + bodyLength },
    };
}
exports.tryParseComment = tryParseComment;
//# sourceMappingURL=rules.js.map