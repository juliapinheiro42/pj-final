"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryParseDefault = exports.tryParseNewline = exports.tryParseLiteral = exports.chainTokenParsers = void 0;
var util_1 = require("../../util");
var number_1 = require("./number");
var rules_1 = require("./rules");
var string_1 = require("./string");
function chainTokenParsers(slice, firstParser) {
    var parsers = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        parsers[_i - 2] = arguments[_i];
    }
    var result = firstParser(slice);
    // go over parsers until one matches or errors
    for (var i = 0; i < parsers.length && result.kind === 'nomatch'; i += 1) {
        result = parsers[i](slice);
    }
    return result;
}
exports.chainTokenParsers = chainTokenParsers;
/**
 * Tries to parse a literal token at current position.
 *
 * Returns nomatch if the current position cannot contain a literal.
 *
 * Returns an error if parsing fails.
 */
function tryParseLiteral(slice) {
    return chainTokenParsers(slice, rules_1.tryParseBooleanLiteral, number_1.tryParseNumberLiteral);
}
exports.tryParseLiteral = tryParseLiteral;
function tryParseNewline(slice) {
    if (util_1.isNewline(slice.charCodeAt(0))) {
        return {
            kind: 'match',
            data: { kind: 7 /* NEWLINE */ },
            relativeSpan: { start: 0, end: 1 },
        };
    }
    else {
        return {
            kind: 'nomatch',
            tokenKind: 7 /* NEWLINE */,
        };
    }
}
exports.tryParseNewline = tryParseNewline;
function tryParseDefault(slice) {
    return chainTokenParsers(slice, tryParseNewline, rules_1.tryParseSeparator, rules_1.tryParseOperator, tryParseLiteral, string_1.tryParseStringLiteral, rules_1.tryParseIdentifier, rules_1.tryParseComment);
}
exports.tryParseDefault = tryParseDefault;
//# sourceMappingURL=glue.js.map