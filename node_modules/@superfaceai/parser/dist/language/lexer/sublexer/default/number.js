"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryParseNumberLiteral = void 0;
var util = __importStar(require("../../util"));
function tryParseNumberLiteral(slice) {
    var _a, _b, _c;
    var prefixLength = 0; // Length of the base prefix plus + or -
    var numberLength = 0; // Length of the actual digits with decimal separator as well
    // Check and store negativity flag
    var isNegative = false;
    {
        if (slice.startsWith('-')) {
            isNegative = true;
            prefixLength = 1;
        }
        else if (slice.startsWith('+')) {
            prefixLength = 1;
        }
    }
    var prefixSlice = slice.slice(prefixLength); // strip the + or -
    // Parse the base prefix
    var keywordLiteralBase = (_c = (_b = (_a = util.tryKeywordLiteral(prefixSlice, '0x', 16, util.isAny)) !== null && _a !== void 0 ? _a : util.tryKeywordLiteral(prefixSlice, '0b', 2, util.isAny)) !== null && _b !== void 0 ? _b : util.tryKeywordLiteral(prefixSlice, '0o', 8, util.isAny)) !== null && _c !== void 0 ? _c : {
        value: 10,
        length: 0,
    };
    prefixLength += keywordLiteralBase.length;
    // integer or float after `base` characters
    var numberSlice = slice.slice(prefixLength);
    var startingNumbers = util.countStartingNumbersRadix(numberSlice, keywordLiteralBase.value);
    // Exit if there aren't any numbers
    if (startingNumbers === 0) {
        if (prefixLength !== 0) {
            return {
                kind: 'error',
                tokenKind: 3 /* LITERAL */,
                errors: [
                    {
                        detail: 'Expected a number following a sign or an integer base prefix',
                        category: "Lexer" /* LEXER */,
                        relativeSpan: { start: 0, end: prefixLength + 1 },
                    },
                ],
            };
        }
        else {
            return { kind: 'nomatch', tokenKind: 3 /* LITERAL */ };
        }
    }
    numberLength += startingNumbers;
    var isFloat = false;
    if (keywordLiteralBase.value === 10) {
        var afterNumberSlice = numberSlice.slice(startingNumbers);
        // Definitely float after decimal separator
        if (util.isDecimalSeparator(afterNumberSlice.charCodeAt(0))) {
            // + 1 for decimal separator
            numberLength += 1 + util.countStartingNumbers(afterNumberSlice.slice(1));
            isFloat = true;
        }
    }
    // Now we know how long the number is and what base it is in, so we parse the subslice using built-in parse functions
    var digitsStringSlice = slice.slice(prefixLength, prefixLength + numberLength);
    var numberValue;
    if (isFloat) {
        numberValue = parseFloat(digitsStringSlice);
    }
    else {
        numberValue = parseInt(digitsStringSlice, keywordLiteralBase.value);
    }
    if (isNaN(numberValue)) {
        // This should never happen as we validate the digits by parsing them
        throw 'Invalid lexer state. This in an error in the lexer.';
    }
    if (isNegative) {
        numberValue = -numberValue;
    }
    return {
        kind: 'match',
        data: {
            kind: 3 /* LITERAL */,
            literal: numberValue,
        },
        relativeSpan: {
            start: 0,
            end: prefixLength + numberLength,
        },
    };
}
exports.tryParseNumberLiteral = tryParseNumberLiteral;
//# sourceMappingURL=number.js.map