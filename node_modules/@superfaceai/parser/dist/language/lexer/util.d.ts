/**
 * Counts starting characters from `str` as long as `predicate` returns true.
 *
 * Returns number of characters at the start of the string that match predicate.
 *
 * This function is basically a find over the input string with the predicate.
 */
export declare function countStarting(predicate: (_: number) => boolean, str: string): number;
export declare function isLetter(char: number): boolean;
export declare const countStartingLetters: (str: string) => number;
export declare function isBinaryNumber(char: number): boolean;
export declare function isOctalNumber(char: number): boolean;
export declare function isDecimalNumber(char: number): boolean;
export declare function isHexadecimalNumber(char: number): boolean;
export declare const countStartingNumbers: (str: string) => number;
export declare function countStartingNumbersRadix(str: string, radix: number): number;
export declare function isDecimalSeparator(char: number): boolean;
export declare function isValidIdentifierStartChar(char: number): boolean;
export declare function isValidIdentifierChar(char: number): boolean;
export declare const countStartingIdentifierChars: (str: string) => number;
export declare function isWhitespace(char: number): boolean;
export declare function isNewline(char: number): boolean;
export declare function isStringLiteralChar(char: number): boolean;
export declare function isStringLiteralEscapeChar(char: number): boolean;
export declare function isDecoratorChar(char: number): boolean;
export declare function isAny(_: number): boolean;
export declare function isNotValidIdentifierChar(char: number): boolean;
/**
 * Tries parsing the following characters to match the specified keyword and be followed
 * by a character matching an optional predicate.
 *
 * If the predicate is not specified, the default predicate is `isNotValidIdentifierChar`
 */
export declare function tryKeywordLiteral<T>(str: string, keyword: string, ret: T, charAfterPredicate?: (_: number) => boolean): {
    value: T;
    length: number;
} | undefined;
