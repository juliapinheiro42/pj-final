"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LexerToken = exports.formatTokenData = exports.formatTokenKind = exports.LITERALS_BOOL = exports.OPERATORS = exports.SEPARATORS = void 0;
var util = __importStar(require("./util"));
exports.SEPARATORS = {
    '(': ['(', util.isAny],
    ')': [')', util.isAny],
    '[': ['[', util.isAny],
    ']': [']', util.isAny],
    '{': ['{', util.isAny],
    '}': ['}', util.isAny],
};
exports.OPERATORS = {
    ':': [':', util.isAny],
    '!': ['!', util.isAny],
    '|': ['|', util.isAny],
    '=': ['=', util.isAny],
    '@': ['@', util.isAny],
    ',': [',', util.isAny],
    ';': [';', util.isAny],
    '.': ['.', util.isAny],
};
// Literals
exports.LITERALS_BOOL = {
    true: [true, util.isNotValidIdentifierChar],
    false: [false, util.isNotValidIdentifierChar],
};
function formatTokenKind(kind) {
    switch (kind) {
        case 0 /* UNKNOWN */:
            return 'unknown';
        case 1 /* SEPARATOR */:
            return 'separator';
        case 2 /* OPERATOR */:
            return 'operator';
        case 3 /* LITERAL */:
            return 'number or boolean literal';
        case 4 /* STRING */:
            return 'string';
        case 5 /* IDENTIFIER */:
            return 'identifier';
        case 6 /* COMMENT */:
            return 'comment';
        case 7 /* NEWLINE */:
            return 'newline';
        case 8 /* JESSIE_SCRIPT */:
            return 'jessie script';
    }
}
exports.formatTokenKind = formatTokenKind;
function formatTokenData(data) {
    var kind = formatTokenKind(data.kind);
    switch (data.kind) {
        case 0 /* UNKNOWN */:
            return { kind: kind, data: 'unknown' };
        case 1 /* SEPARATOR */:
            return { kind: kind, data: data.separator.toString() };
        case 2 /* OPERATOR */:
            return { kind: kind, data: data.operator.toString() };
        case 3 /* LITERAL */:
            return { kind: kind, data: data.literal.toString() };
        case 4 /* STRING */:
            return { kind: kind, data: data.string.toString() };
        case 5 /* IDENTIFIER */:
            return { kind: kind, data: data.identifier.toString() };
        case 6 /* COMMENT */:
            return { kind: kind, data: data.comment.toString() };
        case 7 /* NEWLINE */:
            return { kind: kind, data: '\n' };
        case 8 /* JESSIE_SCRIPT */:
            return { kind: kind, data: data.script.toString() };
    }
}
exports.formatTokenData = formatTokenData;
// Token class //
var LexerToken = /** @class */ (function () {
    function LexerToken(
    /** Data of the token. */
    data, location) {
        this.data = data;
        this.location = location;
    }
    LexerToken.prototype.isSOF = function () {
        return (this.data.kind == 1 /* SEPARATOR */ &&
            this.data.separator === 'SOF');
    };
    LexerToken.prototype.isEOF = function () {
        return (this.data.kind == 1 /* SEPARATOR */ &&
            this.data.separator === 'EOF');
    };
    LexerToken.prototype.toStringDebug = function () {
        var loc = this.location.start.line + ":" + this.location.start.column + ";" + this.location.end.line + ":" + this.location.end.column;
        var span = this.location.start.charIndex + ";" + this.location.end.charIndex;
        return "{" + this.toString() + "}@(" + loc + ")[" + span + "]";
    };
    LexerToken.prototype.toString = function () {
        return this[Symbol.toStringTag]();
    };
    LexerToken.prototype[Symbol.toStringTag] = function () {
        var fmt = formatTokenData(this.data);
        return fmt.kind + " `" + fmt.data + "`";
    };
    return LexerToken;
}());
exports.LexerToken = LexerToken;
//# sourceMappingURL=token.js.map