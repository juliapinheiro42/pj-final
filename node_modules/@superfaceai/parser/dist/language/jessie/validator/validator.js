"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateScript = void 0;
var ts = __importStar(require("typescript"));
var constructs_1 = require("./constructs");
function constructDebugVisualTree(root) {
    var debugTree = '';
    var debugDepth = 0;
    function nodeVisitor(node) {
        var e_1, _a;
        var _b, _c, _d;
        var nodeCode = node.getFullText();
        var treeIndent = ''.padStart(debugDepth, '\t');
        debugTree += treeIndent + "NODE kind: " + ts.SyntaxKind[node.kind] + ", full: [" + node.pos + ", " + node.end + "], text: [" + node.getStart() + ", " + node.getEnd() + "] - \"" + nodeCode + "\"";
        // Go over forbidden constructs and check if any of them applies
        var anyRuleBroken = false;
        var rules = (_b = constructs_1.FORBIDDEN_CONSTRUCTS[node.kind]) !== null && _b !== void 0 ? _b : [];
        try {
            for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                var rule = rules_1_1.value;
                if ((_d = (_c = rule.predicate) === null || _c === void 0 ? void 0 : _c.call(rule, node)) !== null && _d !== void 0 ? _d : true) {
                    anyRuleBroken = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (anyRuleBroken) {
            debugTree += ' [R]';
        }
        else if (!constructs_1.ALLOWED_SYNTAX.includes(node.kind)) {
            // If none of the rules applied, but the syntax is not valid anyway, add an error without a hint
            debugTree += ' [S]';
        }
        debugTree += '\n';
        // Recurse into children
        debugDepth += 1;
        ts.forEachChild(node, nodeVisitor);
        debugDepth -= 1;
    }
    nodeVisitor(root);
    return debugTree;
}
function validateScript(input) {
    var errors = [];
    var rootNode = ts.createSourceFile('scripts.js', input, ts.ScriptTarget.ES2015, true, ts.ScriptKind.JS);
    function nodeVisitor(node) {
        var e_2, _a;
        var _b, _c, _d;
        // Go over forbidden constructs and check if any of them applies
        var anyRuleBroken = false;
        var rules = (_b = constructs_1.FORBIDDEN_CONSTRUCTS[node.kind]) !== null && _b !== void 0 ? _b : [];
        try {
            for (var rules_2 = __values(rules), rules_2_1 = rules_2.next(); !rules_2_1.done; rules_2_1 = rules_2.next()) {
                var rule = rules_2_1.value;
                if ((_d = (_c = rule.predicate) === null || _c === void 0 ? void 0 : _c.call(rule, node)) !== null && _d !== void 0 ? _d : true) {
                    anyRuleBroken = true;
                    errors.push({
                        detail: ts.SyntaxKind[node.kind] + " construct is not supported",
                        hint: rule.hint(input, node),
                        relativeSpan: { start: node.getStart(), end: node.getEnd() },
                        category: "Jessie validation" /* JESSIE_VALIDATION */,
                    });
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (rules_2_1 && !rules_2_1.done && (_a = rules_2.return)) _a.call(rules_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // If none of the rules applied, but the syntax is not valid anyway, add an error without a hint
        if (!anyRuleBroken && !constructs_1.ALLOWED_SYNTAX.includes(node.kind)) {
            errors.push({
                detail: ts.SyntaxKind[node.kind] + " construct is not supported",
                relativeSpan: { start: node.getStart(), end: node.getEnd() },
                category: "Jessie validation" /* JESSIE_VALIDATION */,
            });
        }
        // Recurse into children
        ts.forEachChild(node, nodeVisitor);
    }
    nodeVisitor(rootNode);
    if (process.env.LOG_LEVEL === 'debug') {
        if (errors.length > 0) {
            console.debug(constructDebugVisualTree(rootNode));
        }
    }
    return errors;
}
exports.validateScript = validateScript;
//# sourceMappingURL=validator.js.map