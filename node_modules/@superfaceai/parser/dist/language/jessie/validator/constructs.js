"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ALLOWED_SYNTAX = exports.FORBIDDEN_CONSTRUCTS = void 0;
var ts = __importStar(require("typescript"));
// Forbidden syntax kinds with additional report hint
exports.FORBIDDEN_CONSTRUCTS = (_a = {},
    // TODO: Hint formatting can be improved to handle multiline strings gracefully.
    _a[ts.SyntaxKind.VariableDeclarationList] = [
        {
            predicate: function (node) {
                return (node.flags & (ts.NodeFlags.Let | ts.NodeFlags.Const)) === 0;
            },
            hint: function (source, node) {
                var declarations = source
                    .substring(node.declarations.pos, node.declarations.end)
                    .trim();
                return "Use `const " + declarations + "` or `let " + declarations + "` instead";
            },
        },
    ],
    _a[ts.SyntaxKind.FunctionDeclaration] = [
        {
            hint: function (source, node) {
                var name;
                if (node.name) {
                    name = source
                        .substring(node.name.getStart(), node.name.getEnd())
                        .trim();
                }
                else {
                    name = 'anon';
                }
                var parameters = source
                    .substring(node.parameters.pos, node.parameters.end)
                    .trim();
                return "Use `const " + name + " = (" + parameters + ") => { /* body */ }` instead";
            },
        },
    ],
    _a[ts.SyntaxKind.EqualsEqualsToken] = [
        {
            hint: function (source, node) {
                var parent = node.parent;
                var left = source
                    .substring(parent.left.getStart(), parent.left.getEnd())
                    .trim();
                var right = source
                    .substring(parent.right.getStart(), parent.right.getEnd())
                    .trim();
                return "Use `" + left + " === " + right + "` instead";
            },
        },
    ],
    _a[ts.SyntaxKind.ExclamationEqualsToken] = [
        {
            hint: function (source, node) {
                var parent = node.parent;
                var left = source
                    .substring(parent.left.getStart(), parent.left.getEnd())
                    .trim();
                var right = source
                    .substring(parent.right.getStart(), parent.right.getEnd())
                    .trim();
                return "Use `" + left + " !== " + right + "` instead";
            },
        },
    ],
    _a[ts.SyntaxKind.PrefixUnaryExpression] = [
        {
            predicate: function (node) {
                return node.operator === ts.SyntaxKind.PlusPlusToken;
            },
            hint: function (source, node) {
                var operand = source
                    .substring(node.operand.getStart(), node.operand.getEnd())
                    .trim();
                return "Use `" + operand + " += 1` or `" + operand + "++` instead";
            },
        },
        {
            predicate: function (node) {
                return node.operator === ts.SyntaxKind.MinusMinusToken;
            },
            hint: function (source, node) {
                var operand = source
                    .substring(node.operand.getStart(), node.operand.getEnd())
                    .trim();
                return "Use `" + operand + " -= 1` or `" + operand + "--` instead";
            },
        },
    ],
    _a[ts.SyntaxKind.ShorthandPropertyAssignment] = [
        {
            hint: function (source, node) {
                var beforeText = source.substring(node.parent.getStart(), node.name.getStart());
                var afterText = source.substring(node.name.getEnd(), node.parent.getEnd());
                var propertyName = source
                    .substring(node.name.getStart(), node.name.getEnd())
                    .trim();
                return "Use `" + beforeText + propertyName + ": " + propertyName + afterText + "` instead";
            },
        },
    ],
    _a);
// Explicitly allowed syntax, all other syntax kinds are rejected
exports.ALLOWED_SYNTAX = [
    ts.SyntaxKind.EndOfFileToken,
    // ts.SyntaxKind.SingleLineCommentTrivia,
    // ts.SyntaxKind.MultiLineCommentTrivia,
    // ts.SyntaxKind.NewLineTrivia,
    // ts.SyntaxKind.WhitespaceTrivia,
    // ts.SyntaxKind.ShebangTrivia,
    // ts.SyntaxKind.ConflictMarkerTrivia,
    ts.SyntaxKind.NumericLiteral,
    // ts.SyntaxKind.BigIntLiteral, // 1b
    ts.SyntaxKind.StringLiteral,
    // ts.SyntaxKind.JsxText,
    // ts.SyntaxKind.JsxTextAllWhiteSpaces,
    // ts.SyntaxKind.RegularExpressionLiteral, // /.*/
    ts.SyntaxKind.NoSubstitutionTemplateLiteral,
    ts.SyntaxKind.TemplateHead,
    ts.SyntaxKind.TemplateMiddle,
    ts.SyntaxKind.TemplateTail,
    // ts.SyntaxKind.OpenBraceToken, // {
    // ts.SyntaxKind.CloseBraceToken, // }
    // ts.SyntaxKind.OpenParenToken, // (
    // ts.SyntaxKind.CloseParenToken, // )
    // ts.SyntaxKind.OpenBracketToken, // [
    // ts.SyntaxKind.CloseBracketToken, // ]
    // ts.SyntaxKind.DotToken, // .
    ts.SyntaxKind.DotDotDotToken,
    // ts.SyntaxKind.SemicolonToken, // ;
    ts.SyntaxKind.CommaToken,
    // ts.SyntaxKind.QuestionDotToken, // ?.
    ts.SyntaxKind.LessThanToken,
    // ts.SyntaxKind.LessThanSlashToken, // </
    ts.SyntaxKind.GreaterThanToken,
    ts.SyntaxKind.LessThanEqualsToken,
    ts.SyntaxKind.GreaterThanEqualsToken,
    // ts.SyntaxKind.EqualsEqualsToken, // ==
    // ts.SyntaxKind.ExclamationEqualsToken, // !=
    ts.SyntaxKind.EqualsEqualsEqualsToken,
    ts.SyntaxKind.ExclamationEqualsEqualsToken,
    ts.SyntaxKind.EqualsGreaterThanToken,
    ts.SyntaxKind.PlusToken,
    ts.SyntaxKind.MinusToken,
    ts.SyntaxKind.AsteriskToken,
    ts.SyntaxKind.AsteriskAsteriskToken,
    ts.SyntaxKind.SlashToken,
    ts.SyntaxKind.PercentToken,
    // ts.SyntaxKind.PlusPlusToken, // ++
    // ts.SyntaxKind.MinusMinusToken, // --
    ts.SyntaxKind.LessThanLessThanToken,
    ts.SyntaxKind.GreaterThanGreaterThanToken,
    ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken,
    ts.SyntaxKind.AmpersandToken,
    ts.SyntaxKind.BarToken,
    ts.SyntaxKind.CaretToken,
    ts.SyntaxKind.ExclamationToken,
    ts.SyntaxKind.TildeToken,
    ts.SyntaxKind.AmpersandAmpersandToken,
    ts.SyntaxKind.BarBarToken,
    ts.SyntaxKind.QuestionToken,
    ts.SyntaxKind.ColonToken,
    // ts.SyntaxKind.AtToken, // @
    // ts.SyntaxKind.QuestionQuestionToken, // ??
    // ts.SyntaxKind.BacktickToken, // ` - only produced in jsdoc, template strings are separate
    ts.SyntaxKind.EqualsToken,
    ts.SyntaxKind.PlusEqualsToken,
    ts.SyntaxKind.MinusEqualsToken,
    ts.SyntaxKind.AsteriskEqualsToken,
    ts.SyntaxKind.SlashEqualsToken,
    // TODO: Allow these?
    // ts.SyntaxKind.PercentEqualsToken, // %=
    // ts.SyntaxKind.LessThanLessThanEqualsToken, // <<=
    // ts.SyntaxKind.GreaterThanGreaterThanEqualsToken, // >>=
    // ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken, // >>>=
    // ts.SyntaxKind.AmpersandEqualsToken, // &=
    // ts.SyntaxKind.BarEqualsToken, // |=
    // ts.SyntaxKind.CaretEqualsToken, // ^=
    ts.SyntaxKind.Identifier,
    // ts.SyntaxKind.PrivateIdentifier, // #foo
    // ts.SyntaxKind.BreakKeyword, // break
    // ts.SyntaxKind.CaseKeyword, // case
    // ts.SyntaxKind.CatchKeyword, // catch
    // ts.SyntaxKind.ConstKeyword, // const
    // ts.SyntaxKind.ContinueKeyword, // continue
    // ts.ScriptKind.DebuggerKeyword, // debugger
    // ts.SyntaxKind.DefaultKeyword, // default
    // ts.ScriptKind.DeleteKeyword, // delete
    // ts.SyntaxKind.DoKeyword, // do
    // ts.SyntaxKind.ElseKeyword, // else
    // ts.SyntaxKind.EnumKeyword, // enum
    // ts.SyntaxKind.ExportKeyword, // export
    // ts.SyntaxKind.ExtendsKeyword, // extends
    ts.SyntaxKind.FalseKeyword,
    // ts.SyntaxKind.FinallyKeyword, // finally
    // ts.SyntaxKind.ForKeyword, // for
    // ts.SyntaxKind.FunctionKeyword, // function
    // ts.SyntaxKind.IfKeyword, // if
    // ts.SyntaxKind.ImportKeyword, // import
    // ts.SyntaxKind.InKeyword, // in
    // ts.SyntaxKind.InstanceOfKeyword, // instanceof
    // ts.SyntaxKind.NewKeyword, // new
    ts.SyntaxKind.NullKeyword,
    // ts.SyntaxKind.ReturnKeyword, // return
    // ts.SyntaxKind.SuperKeyword, // super
    // ts.SyntaxKind.SwitchKeyword, // switch
    // ts.SyntaxKind.ThisKeyword, // this
    // ts.SyntaxKind.ThrowKeyword, // throw
    ts.SyntaxKind.TrueKeyword,
    // ts.SyntaxKind.TryKeyword, // try
    // ts.SyntaxKind.TypeOfKeyword, // typeof
    // ts.SyntaxKind.VarKeyword, // var
    // ts.SyntaxKind.VoidKeyword, // void
    // ts.SyntaxKind.WhileKeyword, // while
    // ts.SyntaxKind.WithKeyword, // with
    // ts.SyntaxKind.ImplementsKeyword, // implements
    // ts.SyntaxKind.InterfaceKeyword, // interface
    ts.SyntaxKind.LetKeyword,
    // ts.SyntaxKind.PackageKeyword, // package
    // ts.SyntaxKind.PrivateKeyword, // private
    // ts.SyntaxKind.ProtectedKeyword, // protected
    // ts.SyntaxKind.PublicKeyword, // public
    // ts.SyntaxKind.StaticKeyword, // static
    // ts.SyntaxKind.YieldKeyword, // yield
    // ts.SyntaxKind.AbstractKeyword, // abstract
    // ts.SyntaxKind.AsKeyword, // as
    // ts.SyntaxKind.AssertsKeyword, // asserts
    // ts.SyntaxKind.AnyKeyword, // any
    // ts.SyntaxKind.AsyncKeyword, // async
    // ts.SyntaxKind.AwaitKeyword, // await
    // ts.SyntaxKind.BooleanKeyword, // boolean
    // ts.SyntaxKind.ConstructorKeyword, // constructor
    // ts.SyntaxKind.DeclareKeyword, // declare
    // ts.SyntaxKind.GetKeyword, // get
    // ts.SyntaxKind.InferKeyword, // infer
    // ts.SyntaxKind.IsKeyword, // is
    // ts.SyntaxKind.KeyOfKeyword, // keyof
    // ts.SyntaxKind.ModuleKeyword, // module
    // ts.SyntaxKind.NamespaceKeyword, // namespace
    // ts.SyntaxKind.NeverKeyword, // never
    // ts.SyntaxKind.ReadonlyKeyword, // readonly
    // ts.SyntaxKind.RequireKeyword, // require
    // ts.SyntaxKind.NumberKeyword, // number
    // ts.SyntaxKind.ObjectKeyword, // object
    // ts.SyntaxKind.SetKeyword, // set
    // ts.SyntaxKind.StringKeyword, // string
    // ts.SyntaxKind.SymbolKeyword, // symbol
    // ts.SyntaxKind.TypeKeyword, // type
    ts.SyntaxKind.UndefinedKeyword,
    // ts.SyntaxKind.UniqueKeyword, // unique
    // ts.SyntaxKind.UnknownKeyword, // unknown
    // ts.SyntaxKind.FromKeyword, // from
    // ts.SyntaxKind.GlobalKeyword, // global
    // ts.SyntaxKind.BigIntKeyword, // bigint
    // ts.SyntaxKind.OfKeyword, // of
    // ts.SyntaxKind.QualifiedName,
    // ts.SyntaxKind.ComputedPropertyName,
    // ts.SyntaxKind.TypeParameter, // (arg: type, arg2: type2)
    ts.SyntaxKind.Parameter,
    // ts.SyntaxKind.Decorator, // @decorator
    // ts.SyntaxKind.PropertySignature,
    // ts.SyntaxKind.PropertyDeclaration,
    // ts.SyntaxKind.MethodSignature,
    // ts.SyntaxKind.MethodDeclaration,
    // ts.SyntaxKind.Constructor,
    // ts.SyntaxKind.GetAccessor,
    // ts.SyntaxKind.SetAccessor,
    // ts.SyntaxKind.CallSignature,
    // ts.SyntaxKind.ConstructSignature,
    // ts.SyntaxKind.IndexSignature,
    // ts.SyntaxKind.TypePredicate,
    // ts.SyntaxKind.TypeReference,
    // ts.SyntaxKind.FunctionType,
    // ts.SyntaxKind.ConstructorType,
    // ts.SyntaxKind.TypeQuery,
    // ts.SyntaxKind.TypeLiteral,
    // ts.SyntaxKind.ArrayType, // type[]
    // ts.SyntaxKind.TupleType, // [type, type2]
    // ts.SyntaxKind.OptionalType, // type?
    // ts.SyntaxKind.RestType, // ident...
    // ts.SyntaxKind.UnionType, // type | type2
    // ts.SyntaxKind.IntersectionType, // type & type2
    // ts.SyntaxKind.ConditionalType, // cond ? type : type2
    // ts.SyntaxKind.InferType,
    // ts.SyntaxKind.ParenthesizedType,
    // ts.SyntaxKind.ThisType, // this
    // ts.SyntaxKind.TypeOperator,
    // ts.SyntaxKind.IndexedAccessType,
    // ts.SyntaxKind.MappedType,
    // ts.SyntaxKind.LiteralType,
    // ts.SyntaxKind.ImportType,
    ts.SyntaxKind.ObjectBindingPattern,
    ts.SyntaxKind.ArrayBindingPattern,
    ts.SyntaxKind.BindingElement,
    ts.SyntaxKind.ArrayLiteralExpression,
    ts.SyntaxKind.ObjectLiteralExpression,
    ts.SyntaxKind.PropertyAccessExpression,
    ts.SyntaxKind.ElementAccessExpression,
    ts.SyntaxKind.CallExpression,
    // ts.SyntaxKind.NewExpression, // new ident()
    // ts.SyntaxKind.TaggedTemplateExpression,
    // ts.SyntaxKind.TypeAssertionExpression, // a is type
    ts.SyntaxKind.ParenthesizedExpression,
    // ts.SyntaxKind.FunctionExpression,
    ts.SyntaxKind.ArrowFunction,
    // ts.SyntaxKind.DeleteExpression, // delete expr
    // ts.SyntaxKind.TypeOfExpression, // typeof expr
    // ts.SyntaxKind.VoidExpression, // void
    // ts.SyntaxKind.AwaitExpression, // await expr
    ts.SyntaxKind.PrefixUnaryExpression,
    ts.SyntaxKind.PostfixUnaryExpression,
    ts.SyntaxKind.BinaryExpression,
    ts.SyntaxKind.ConditionalExpression,
    ts.SyntaxKind.TemplateExpression,
    // ts.SyntaxKind.YieldExpression, // yield expr
    ts.SyntaxKind.SpreadElement,
    // ts.SyntaxKind.ClassExpression, // class ident { expr* }
    // ts.SyntaxKind.OmittedExpression,
    // ts.SyntaxKind.ExpressionWithTypeArguments,
    // ts.SyntaxKind.AsExpression, // x as type
    // ts.SyntaxKind.NonNullExpression, // x!!
    // ts.SyntaxKind.MetaProperty,
    // ts.SyntaxKind.SyntheticExpression,
    ts.SyntaxKind.TemplateSpan,
    // ts.SyntaxKind.SemicolonClassElement,
    ts.SyntaxKind.Block,
    // ts.SyntaxKind.EmptyStatement, // ;
    ts.SyntaxKind.VariableStatement,
    ts.SyntaxKind.ExpressionStatement,
    ts.SyntaxKind.IfStatement,
    ts.SyntaxKind.DoStatement,
    ts.SyntaxKind.WhileStatement,
    ts.SyntaxKind.ForStatement,
    // ts.SyntaxKind.ForInStatement, // for (var in expr) stmt
    ts.SyntaxKind.ForOfStatement,
    ts.SyntaxKind.ContinueStatement,
    ts.SyntaxKind.BreakStatement,
    ts.SyntaxKind.ReturnStatement,
    // ts.SyntaxKind.WithStatement, // with (expr) stmt
    ts.SyntaxKind.SwitchStatement,
    ts.SyntaxKind.LabeledStatement,
    // ts.SyntaxKind.ThrowStatement, // throw expr
    // ts.SyntaxKind.TryStatement, // try (expr) stmt catch (expr) stmt
    // ts.SyntaxKind.DebuggerStatement, // debugger
    ts.SyntaxKind.VariableDeclaration,
    ts.SyntaxKind.VariableDeclarationList,
    // ts.SyntaxKind.FunctionDeclaration,
    // ts.SyntaxKind.ClassDeclaration,
    // ts.SyntaxKind.InterfaceDeclaration,
    // ts.SyntaxKind.TypeAliasDeclaration
    // ts.SyntaxKind.EnumDeclaration,
    // ts.SyntaxKind.ModuleDeclaration,
    // ts.SyntaxKind.ModuleBlock,
    ts.SyntaxKind.CaseBlock,
    // ts.SyntaxKind.NamespaceExportDeclaration,
    // ts.SyntaxKind.ImportEqualsDeclaration,
    // ts.SyntaxKind.ImportDeclaration,
    // ts.SyntaxKind.ImportClause, // import 'module'
    // ts.SyntaxKind.NamespaceImport,
    // ts.SyntaxKind.NamedImports,
    // ts.SyntaxKind.ImportSpecifier,
    // ts.SyntaxKind.ExportAssignment,
    // ts.SyntaxKind.ExportDeclaration,
    // ts.SyntaxKind.NamedExports,
    // ts.SyntaxKind.NamespaceExport,
    // ts.SyntaxKind.ExportSpecifier,
    // ts.SyntaxKind.MissingDeclaration,
    // ts.SyntaxKind.ExternalModuleReference,
    // ts.SyntaxKind.JsxElement,
    // ts.SyntaxKind.JsxSelfClosingElement,
    // ts.SyntaxKind.JsxOpeningElement,
    // ts.SyntaxKind.JsxClosingElement,
    // ts.SyntaxKind.JsxFragment,
    // ts.SyntaxKind.JsxOpeningFragment,
    // ts.SyntaxKind.JsxClosingFragment,
    // ts.SyntaxKind.JsxAttribute,
    // ts.SyntaxKind.JsxAttributes,
    // ts.SyntaxKind.JsxSpreadAttribute,
    // ts.SyntaxKind.JsxExpression,
    ts.SyntaxKind.CaseClause,
    ts.SyntaxKind.DefaultClause,
    // ts.SyntaxKind.HeritageClause,
    // ts.SyntaxKind.CatchClause,
    ts.SyntaxKind.PropertyAssignment,
    // ts.SyntaxKind.ShorthandPropertyAssignment,
    ts.SyntaxKind.SpreadAssignment,
    // ts.SyntaxKind.EnumMember,
    // ts.SyntaxKind.UnparsedPrologue,
    // ts.SyntaxKind.UnparsedPrepend,
    // ts.SyntaxKind.UnparsedText,
    // ts.SyntaxKind.UnparsedInternalText,
    // ts.SyntaxKind.UnparsedSyntheticReference,
    ts.SyntaxKind.SourceFile,
    // ts.SyntaxKind.Bundle,
    // ts.SyntaxKind.UnparsedSource,
    // ts.SyntaxKind.InputFiles,
    // ts.SyntaxKind.JSDocTypeExpression,
    // ts.SyntaxKind.JSDocAllType,
    // ts.SyntaxKind.JSDocUnknownType,
    // ts.SyntaxKind.JSDocNullableType,
    // ts.SyntaxKind.JSDocNonNullableType,
    // ts.SyntaxKind.JSDocOptionalType,
    // ts.SyntaxKind.JSDocFunctionType,
    // ts.SyntaxKind.JSDocVariadicType,
    // ts.SyntaxKind.JSDocNamepathType,
    // ts.SyntaxKind.JSDocComment,
    // ts.SyntaxKind.JSDocTypeLiteral,
    // ts.SyntaxKind.JSDocSignature,
    // ts.SyntaxKind.JSDocTag,
    // ts.SyntaxKind.JSDocAugmentsTag,
    // ts.SyntaxKind.JSDocImplementsTag,
    // ts.SyntaxKind.JSDocAuthorTag,
    // ts.SyntaxKind.JSDocClassTag,
    // ts.SyntaxKind.JSDocPublicTag,
    // ts.SyntaxKind.JSDocPrivateTag,
    // ts.SyntaxKind.JSDocProtectedTag,
    // ts.SyntaxKind.JSDocReadonlyTag,
    // ts.SyntaxKind.JSDocCallbackTag,
    // ts.SyntaxKind.JSDocEnumTag,
    // ts.SyntaxKind.JSDocParameterTag,
    // ts.SyntaxKind.JSDocReturnTag,
    // ts.SyntaxKind.JSDocThisTag,
    // ts.SyntaxKind.JSDocTypeTag,
    // ts.SyntaxKind.JSDocTemplateTag,
    // ts.SyntaxKind.JSDocTypedefTag,
    // ts.SyntaxKind.JSDocPropertyTag,
    // ts.SyntaxKind.SyntaxList,
    // ts.SyntaxKind.NotEmittedStatement,
    // ts.SyntaxKind.PartiallyEmittedExpression,
    // ts.SyntaxKind.CommaListExpression,
    // ts.SyntaxKind.MergeDeclarationMarker,
    // ts.SyntaxKind.EndOfDeclarationMarker,
    // ts.SyntaxKind.SyntheticReferenceExpression,
    // ts.SyntaxKind.Count,
    ts.SyntaxKind.FirstAssignment,
    ts.SyntaxKind.LastAssignment,
    ts.SyntaxKind.FirstCompoundAssignment,
    ts.SyntaxKind.LastCompoundAssignment,
    ts.SyntaxKind.FirstReservedWord,
    ts.SyntaxKind.LastReservedWord,
    ts.SyntaxKind.FirstKeyword,
    ts.SyntaxKind.LastKeyword,
    ts.SyntaxKind.FirstFutureReservedWord,
    ts.SyntaxKind.LastFutureReservedWord,
    ts.SyntaxKind.FirstPunctuation,
    ts.SyntaxKind.LastPunctuation,
    ts.SyntaxKind.FirstToken,
    ts.SyntaxKind.LastToken,
    ts.SyntaxKind.FirstTriviaToken,
    ts.SyntaxKind.LastTriviaToken,
    ts.SyntaxKind.FirstLiteralToken,
    ts.SyntaxKind.LastLiteralToken,
    ts.SyntaxKind.FirstTemplateToken,
    ts.SyntaxKind.LastTemplateToken,
    ts.SyntaxKind.FirstBinaryOperator,
    ts.SyntaxKind.LastBinaryOperator,
    ts.SyntaxKind.FirstStatement,
    ts.SyntaxKind.LastStatement,
    ts.SyntaxKind.FirstNode,
    //   ts.SyntaxKind.FirstJSDocNode,
    //   ts.SyntaxKind.LastJSDocNode,
    //   ts.SyntaxKind.FirstJSDocTagNode,
    //   ts.SyntaxKind.LastJSDocTagNode,
];
//# sourceMappingURL=constructs.js.map