"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVariableName = exports.getTypescriptIdentifierName = exports.findTypescriptProperty = exports.findTypescriptIdentifier = exports.validateObjectStructure = exports.replaceRedudantCharacters = exports.REDUDANT_EXPRESSION_CHARACTERS_REGEX = exports.getTypescriptIdentifier = exports.validateMap = exports.getProfileOutput = exports.getProfileUsecases = exports.mergeVariables = exports.getOutcomes = exports.compareStructure = exports.formatIssues = exports.formatIssueContext = exports.composeVersion = void 0;
var ast_1 = require("@superfaceai/ast");
var ts = __importStar(require("typescript"));
var map_validator_1 = require("./map-validator");
var profile_io_analyzer_1 = require("./profile-io-analyzer");
var profile_output_utils_1 = require("./profile-output.utils");
function composeVersion(version) {
    return (version.major + "." + version.minor +
        (version.patch !== undefined ? "." + version.patch : '') +
        (version.label ? "-" + version.label : ''));
}
exports.composeVersion = composeVersion;
function formatIssueContext(issue) {
    var _a, _b;
    var expected;
    var actual;
    switch (issue.kind) {
        case 'wrongScope':
            return "Wrong Scope: expected " + ((_a = issue.context.expected) !== null && _a !== void 0 ? _a : 'no scope in profile') + ", but got " + ((_b = issue.context.actual) !== null && _b !== void 0 ? _b : 'no scope in map');
        case 'wrongProfileName':
            return "Wrong Profile Name: expected " + issue.context.expected + ", but got " + issue.context.actual;
        case 'wrongProfileVersion':
            return "Wrong Profile Version: profile is " + composeVersion(issue.context.expected) + ", but map requests " + composeVersion(issue.context.actual);
        case 'mapNotFound':
            return "Map not found: " + issue.context.expected;
        case 'extraMapsFound':
            return "Extra Maps Found: " + issue.context.expected.join(',') + ", but got " + issue.context.actual.join(', ');
        case 'resultNotDefined':
            return 'Result not defined';
        case 'errorNotDefined':
            return 'Error not defined';
        case 'resultNotFound':
            if (ast_1.isPrimitiveLiteralNode(issue.context.actualResult)) {
                actual = issue.context.actualResult.value;
            }
            else {
                actual = issue.context.actualResult.kind;
            }
            return "Result Not Found: returning \"" + actual.toString() + "\", but there is no result defined in usecase";
        case 'errorNotFound':
            if (ast_1.isPrimitiveLiteralNode(issue.context.actualError)) {
                actual = issue.context.actualError.value;
            }
            else {
                actual = issue.context.actualError.kind;
            }
            return "Error Not Found: returning \"" + actual.toString() + "\", but there is no error defined in usecase";
        case 'inputNotFound':
            return "Input Not Found: " + issue.context.actual + " - there is no input defined in usecase";
        case 'wrongObjectStructure':
            expected = Object.keys(issue.context.expected).join(', ');
            actual =
                typeof issue.context.actual === 'string'
                    ? issue.context.actual
                    : issue.context.actual.map(function (val) { return val.key.join('.'); }).join(', ');
            return "Wrong Object Structure: expected " + expected + ", but got " + actual;
        case 'wrongStructure':
            if (profile_output_utils_1.isPrimitiveStructure(issue.context.expected)) {
                expected = issue.context.expected.type;
            }
            else if (profile_output_utils_1.isNonNullStructure(issue.context.expected)) {
                if (profile_output_utils_1.isPrimitiveStructure(issue.context.expected.value)) {
                    expected = issue.context.expected.value.type;
                }
                else {
                    expected = issue.context.expected.value.kind;
                }
            }
            else if (profile_output_utils_1.isEnumStructure(issue.context.expected)) {
                expected = issue.context.expected.enums
                    .map(function (enumValue) { return enumValue.value; })
                    .join(' or ');
            }
            else {
                expected = issue.context.expected.kind;
            }
            if (typeof issue.context.actual !== 'string') {
                if (issue.context.actual.kind === 'PrimitiveLiteral') {
                    actual = issue.context.actual.value;
                }
                else {
                    actual = issue.context.actual.kind;
                }
            }
            else {
                actual = issue.context.actual;
            }
            return "Wrong Structure: expected " + expected + ", but got \"" + actual.toString() + "\"";
        case 'missingRequired':
            return 'Missing required field';
        case 'wrongInput':
            if (!issue.context.expected.fields) {
                throw new Error('This should not happen!');
            }
            expected = Object.keys(issue.context.expected.fields).join(', ');
            return "Wrong Input Structure: expected " + expected + ", but got " + issue.context.actual;
        case 'wrongVariableStructure':
            if (profile_output_utils_1.isPrimitiveStructure(issue.context.expected)) {
                expected = issue.context.expected.type;
            }
            else if (profile_output_utils_1.isNonNullStructure(issue.context.expected)) {
                if (profile_output_utils_1.isPrimitiveStructure(issue.context.expected.value)) {
                    expected = issue.context.expected.value.type;
                }
                else {
                    expected = issue.context.expected.value.kind;
                }
            }
            else if (profile_output_utils_1.isEnumStructure(issue.context.expected)) {
                expected = issue.context.expected.enums
                    .map(function (enumValue) { return enumValue.value; })
                    .join(' or ');
            }
            else {
                expected = issue.context.expected.kind;
            }
            if (typeof issue.context.actual !== 'string') {
                if (ast_1.isPrimitiveLiteralNode(issue.context.actual)) {
                    actual = issue.context.actual.value;
                }
                else {
                    actual = issue.context.actual.kind;
                }
            }
            else {
                actual = issue.context.actual;
            }
            return "Wrong Variable Structure: variable " + issue.context.name + " expected " + expected + ", but got " + actual.toString();
        default:
            throw new Error('Invalid issue!');
    }
}
exports.formatIssueContext = formatIssueContext;
function formatIssues(issues) {
    if (!issues) {
        return 'Unknown issue';
    }
    return issues
        .map(function (issue) {
        var location = issue.context
            ? issue.context.path
                ? issue.context.path.join(' ')
                : ''
            : '';
        return location + " - " + formatIssueContext(issue);
    })
        .join('\n');
}
exports.formatIssues = formatIssues;
/**
 * Compares the node with profile output structure. The arguments represent the actual nested level in structure.
 * @param node represents LiteralNode
 * @param structure represent Result or Error and their descendent structure
 */
function compareStructure(node, structure) {
    var e_1, _a;
    switch (structure.kind) {
        case 'PrimitiveStructure':
            if (ast_1.isPrimitiveLiteralNode(node) &&
                typeof node.value === structure.type) {
                return { isValid: true };
            }
            break;
        case 'ObjectStructure':
            if (ast_1.isObjectLiteralNode(node)) {
                return { isValid: true, structureOfFields: structure.fields };
            }
            break;
        case 'EnumStructure':
            if (ast_1.isPrimitiveLiteralNode(node) &&
                structure.enums.map(function (enumValue) { return enumValue.value; }).includes(node.value)) {
                return { isValid: true };
            }
            break;
        case 'UnionStructure': try {
            for (var _b = __values(Object.values(structure.types)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                var compareResult = compareStructure(node, type);
                if (compareResult.isValid) {
                    return compareResult;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return { isValid: false };
}
exports.compareStructure = compareStructure;
function getOutcomes(node, isErrorFilter) {
    var filterFunction = function (input) {
        if (!ast_1.isOutcomeStatementNode(input)) {
            return false;
        }
        if (isErrorFilter !== undefined && input.isError !== isErrorFilter) {
            return false;
        }
        return true;
    };
    var outcomes = node.statements
        .filter(filterFunction)
        .concat(node.statements
        .filter(ast_1.isCallStatementNode)
        .flatMap(function (callStatement) {
        return callStatement.statements.filter(filterFunction);
    }))
        .concat(node.statements
        .filter(ast_1.isHttpCallStatementNode)
        .flatMap(function (httpCall) {
        return httpCall.responseHandlers.flatMap(function (responseHandler) {
            return responseHandler.statements.filter(filterFunction);
        });
    }));
    return outcomes;
}
exports.getOutcomes = getOutcomes;
var mergeVariables = function (left, right) {
    var e_2, _a, e_3, _b;
    var result = {};
    try {
        for (var _c = __values(Object.keys(left)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var key = _d.value;
            result[key] = left[key];
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        for (var _e = __values(Object.keys(right)), _f = _e.next(); !_f.done; _f = _e.next()) {
            var key = _f.value;
            result[key] = right[key];
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return result;
};
exports.mergeVariables = mergeVariables;
var getProfileUsecases = function (profile) {
    return profile.definitions
        .filter(ast_1.isUseCaseDefinitionNode)
        .map(function (definition) { return ({
        name: definition.useCaseName,
        safety: definition.safety,
    }); });
};
exports.getProfileUsecases = getProfileUsecases;
var getProfileOutput = function (profile) {
    var analyzer = new profile_io_analyzer_1.ProfileIOAnalyzer();
    return analyzer.visit(profile);
};
exports.getProfileOutput = getProfileOutput;
var validateMap = function (profileOutput, mapAst) {
    var mapValidator = new map_validator_1.MapValidator(mapAst, profileOutput);
    return mapValidator.validate();
};
exports.validateMap = validateMap;
function getTypescriptIdentifier(node) {
    if (ts.isPropertyAccessExpression(node) ||
        ts.isElementAccessExpression(node) ||
        ts.isIdentifier(node)) {
        return node;
    }
    return ts.forEachChild(node, getTypescriptIdentifier);
}
exports.getTypescriptIdentifier = getTypescriptIdentifier;
exports.REDUDANT_EXPRESSION_CHARACTERS_REGEX = /['"[\]]/g;
function replaceRedudantCharacters(text) {
    return text.replace(exports.REDUDANT_EXPRESSION_CHARACTERS_REGEX, '');
}
exports.replaceRedudantCharacters = replaceRedudantCharacters;
function validateObjectStructure(node, structure) {
    if (ts.isIdentifier(node)) {
        return structure;
    }
    var expression;
    var name;
    if (ts.isElementAccessExpression(node)) {
        expression = node.expression;
        name = node.argumentExpression;
    }
    else {
        expression = node.expression;
        name = node.name;
    }
    var key = replaceRedudantCharacters(name.getText());
    var outputStructure;
    if (ts.isPropertyAccessExpression(expression) ||
        ts.isElementAccessExpression(expression)) {
        outputStructure = validateObjectStructure(expression, structure);
    }
    else if (ts.isIdentifier(expression)) {
        if (!structure.fields) {
            return undefined;
        }
        return structure.fields[key];
    }
    if (!outputStructure ||
        !profile_output_utils_1.isObjectStructure(outputStructure) ||
        !outputStructure.fields) {
        return undefined;
    }
    return outputStructure.fields[key];
}
exports.validateObjectStructure = validateObjectStructure;
function findTypescriptIdentifier(name, node) {
    if (ts.isPropertyAccessExpression(node) ||
        ts.isElementAccessExpression(node)) {
        return findTypescriptIdentifier(name, node.expression);
    }
    if (ts.isIdentifier(node)) {
        return node.text === name;
    }
    return false;
}
exports.findTypescriptIdentifier = findTypescriptIdentifier;
function findTypescriptProperty(name, node) {
    if (ts.isPropertyAccessExpression(node)) {
        return ts.isIdentifier(node.expression)
            ? name === node.name.text
            : findTypescriptProperty(name, node.expression);
    }
    if (ts.isElementAccessExpression(node)) {
        return ts.isIdentifier(node.expression)
            ? name === replaceRedudantCharacters(node.argumentExpression.getText())
            : findTypescriptProperty(name, node.expression);
    }
    return false;
}
exports.findTypescriptProperty = findTypescriptProperty;
function getTypescriptIdentifierName(node) {
    if (ts.isIdentifier(node)) {
        return node.text;
    }
    if (ts.isPropertyAccessExpression(node)) {
        return replaceRedudantCharacters(node.getText());
    }
    if (ts.isElementAccessExpression(node)) {
        return replaceRedudantCharacters(node.expression.getText() + "." + node.argumentExpression.getText());
    }
    return 'undefined';
}
exports.getTypescriptIdentifierName = getTypescriptIdentifierName;
function getVariableName(node, name) {
    name = name ? replaceRedudantCharacters(name) : '';
    if (ts.isIdentifier(node) || ts.isStringLiteral(node)) {
        return name !== '' ? node.text + "." + name : node.text;
    }
    if (ts.isPropertyAccessExpression(node)) {
        name = name !== '' ? node.name.text + "." + name : node.name.text;
        return getVariableName(node.expression, name);
    }
    if (ts.isElementAccessExpression(node)) {
        var nodeName = node.argumentExpression.text;
        name = name !== '' ? nodeName + "." + name : nodeName;
        return getVariableName(node.expression, name);
    }
    return 'undefined';
}
exports.getVariableName = getVariableName;
//# sourceMappingURL=utils.js.map