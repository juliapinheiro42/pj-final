import * as ts from 'typescript';
import { ValidationResult } from './map-validator';
import { ObjectStructure, StructureType } from './profile-output';
export declare type TypescriptIdentifier = ts.Identifier | ts.PropertyAccessExpression | ts.ElementAccessExpression;
export declare type ReferencedVariables = {
    jessieNode: TypescriptIdentifier;
    type: StructureType;
};
export declare type ConstructResult = ValidationResult & {
    variables?: ReferencedVariables[];
    invalidInput: boolean;
    invalidOutput: boolean;
};
export interface VisitConstruct<T extends ts.Node = ts.Node> {
    visit(node: T, outputStructure?: StructureType, inputStructure?: ObjectStructure, isOutcomeWithCondition?: boolean): ConstructResult;
}
export declare const RETURN_CONSTRUCTS: {
    [kind in ts.SyntaxKind]?: VisitConstruct;
};
