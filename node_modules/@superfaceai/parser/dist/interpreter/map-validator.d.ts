import { AssignmentNode, CallStatementNode, ConditionAtomNode, HttpCallStatementNode, HttpRequestNode, HttpResponseHandlerNode, InlineCallNode, IterationAtomNode, JessieExpressionNode, LiteralNode, MapASTNode, MapAstVisitor, MapDefinitionNode, MapDocumentNode, MapHeaderNode, ObjectLiteralNode, OperationDefinitionNode, OutcomeStatementNode, PrimitiveLiteralNode, SetStatementNode } from '@superfaceai/ast';
import { ValidationIssue } from './issue';
import { ProfileOutput } from './profile-output';
export declare type ValidationResult = {
    pass: true;
    warnings?: ValidationIssue[];
} | {
    pass: false;
    errors: ValidationIssue[];
    warnings?: ValidationIssue[];
};
export declare type ScopeInfo = 'map' | 'call' | 'httpResponse';
export declare class MapValidator implements MapAstVisitor {
    private readonly mapAst;
    private readonly profileOutput;
    private stack;
    private errors;
    private warnings;
    private operations;
    private currentUseCase;
    private currentStructure;
    private inputStructure;
    private isOutcomeWithCondition;
    constructor(mapAst: MapASTNode, profileOutput: ProfileOutput);
    validate(): ValidationResult;
    visit(node: LiteralNode | AssignmentNode): boolean;
    visit(node: MapASTNode): void;
    visitMapDocumentNode(node: MapDocumentNode): void;
    visitMapHeaderNode(node: MapHeaderNode): void;
    visitOperationDefinitionNode(_node: OperationDefinitionNode): never;
    visitMapDefinitionNode(node: MapDefinitionNode): void;
    visitHttpCallStatementNode(node: HttpCallStatementNode): void;
    visitHttpResponseHandlerNode(node: HttpResponseHandlerNode): void;
    visitHttpRequestNode(node: HttpRequestNode): void;
    visitCallStatementNode(node: CallStatementNode): void;
    visitOutcomeStatementNode(node: OutcomeStatementNode): void;
    visitSetStatementNode(node: SetStatementNode): void;
    visitConditionAtomNode(node: ConditionAtomNode): void;
    visitIterationAtomNode(node: IterationAtomNode): void;
    visitAssignmentNode(node: AssignmentNode): boolean;
    visitInlineCallNode(node: InlineCallNode): boolean;
    visitJessieExpressionNode(node: JessieExpressionNode): boolean;
    visitObjectLiteralNode(node: ObjectLiteralNode): boolean;
    visitPrimitiveLiteralNode(node: PrimitiveLiteralNode): boolean;
    private getPath;
    private cleanUpVariables;
    private handleVariable;
    private addVariableToStack;
    private newStack;
    private get variables();
    private get stackTop();
    private addIssue;
}
