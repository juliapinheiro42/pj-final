"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileIOAnalyzer = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var profile_output_utils_1 = require("./profile-output.utils");
var debug = debug_1.default('superface-parser:profile-io-analyzer');
function addDoc(node, structure) {
    var _a, _b;
    var result = __assign({}, structure);
    if (((_a = node.documentation) === null || _a === void 0 ? void 0 : _a.description) !== undefined) {
        result.description = node.documentation.description;
    }
    if (((_b = node.documentation) === null || _b === void 0 ? void 0 : _b.title) !== undefined) {
        result.title = node.documentation.title;
    }
    return result;
}
function assertUnreachable(node) {
    throw new Error("Invalid Node kind: " + node.kind);
}
var ProfileIOAnalyzer = /** @class */ (function () {
    function ProfileIOAnalyzer() {
        this.namedFields = {};
        this.namedModels = {};
        this.fields = {};
        this.models = {};
    }
    ProfileIOAnalyzer.prototype.visit = function (node) {
        if (!node) {
            return undefined;
        }
        debug('Visiting node: ' + node.kind);
        switch (node.kind) {
            case 'EnumDefinition':
                return this.visitEnumDefinitionNode(node);
            case 'EnumValue':
                return this.visitEnumValueNode(node);
            case 'FieldDefinition':
                return this.visitFieldDefinitionNode(node);
            case 'ListDefinition':
                return this.visitListDefinitionNode(node);
            case 'ModelTypeName':
                return this.visitModelTypeNameNode(node);
            case 'NamedFieldDefinition':
                return this.visitNamedFieldDefinitionNode(node);
            case 'NamedModelDefinition':
                return this.visitNamedModelDefinitionNode(node);
            case 'NonNullDefinition':
                return this.visitNonNullDefinitionNode(node);
            case 'ObjectDefinition':
                return this.visitObjectDefinitionNode(node);
            case 'PrimitiveTypeName':
                return this.visitPrimitiveTypeNameNode(node);
            case 'ProfileDocument':
                return this.visitProfileDocumentNode(node);
            case 'ProfileHeader':
                return this.visitProfileHeaderNode(node);
            case 'UnionDefinition':
                return this.visitUnionDefinitionNode(node);
            case 'UseCaseDefinition':
                return this.visitUseCaseDefinitionNode(node);
            case 'UseCaseSlotDefinition':
                return this.visitUseCaseSlotDefinition(node);
            case 'UseCaseExample':
            case 'ComlinkPrimitiveLiteral':
            case 'ComlinkListLiteral':
            case 'ComlinkObjectLiteral':
                throw new Error('TODO: Not implemented');
            default:
                assertUnreachable(node);
        }
    };
    ProfileIOAnalyzer.prototype.visitUseCaseSlotDefinition = function (node) {
        return addDoc(node, this.visit(node.value));
    };
    ProfileIOAnalyzer.prototype.visitEnumDefinitionNode = function (node) {
        var _this = this;
        return {
            kind: 'EnumStructure',
            enums: node.values.map(function (value) {
                return addDoc(value, { value: _this.visit(value) });
            }),
        };
    };
    ProfileIOAnalyzer.prototype.visitEnumValueNode = function (node) {
        return node.value;
    };
    ProfileIOAnalyzer.prototype.visitFieldDefinitionNode = function (node) {
        var _a;
        if (!this.fields[node.fieldName]) {
            this.visit(this.namedFields[node.fieldName]);
        }
        var required = node.required;
        var field = (_a = this.fields[node.fieldName]) !== null && _a !== void 0 ? _a : { kind: 'ScalarStructure' };
        var result = node.type ? this.visit(node.type) : __assign({ required: required }, field);
        return addDoc(node, __assign({ required: required }, result));
    };
    ProfileIOAnalyzer.prototype.visitListDefinitionNode = function (node) {
        var value = this.visit(node.elementType);
        return {
            kind: 'ListStructure',
            value: value,
        };
    };
    ProfileIOAnalyzer.prototype.visitModelTypeNameNode = function (node) {
        var _a;
        if (!this.models[node.name]) {
            this.visit(this.namedModels[node.name]);
        }
        return (_a = this.models[node.name]) !== null && _a !== void 0 ? _a : { kind: 'ScalarStructure' };
    };
    ProfileIOAnalyzer.prototype.visitNamedFieldDefinitionNode = function (node) {
        this.fields[node.fieldName] = addDoc(node, node.type ? this.visit(node.type) : { kind: 'ScalarStructure' });
    };
    ProfileIOAnalyzer.prototype.visitNamedModelDefinitionNode = function (node) {
        this.models[node.modelName] = addDoc(node, node.type ? this.visit(node.type) : { kind: 'ScalarStructure' });
    };
    ProfileIOAnalyzer.prototype.visitNonNullDefinitionNode = function (node) {
        var value = this.visit(node.type);
        if (profile_output_utils_1.isUnionStructure(value)) {
            throw new Error('Something went very wrong, this should not happen!');
        }
        return {
            kind: 'NonNullStructure',
            value: value,
        };
    };
    ProfileIOAnalyzer.prototype.visitObjectDefinitionNode = function (node) {
        var _this = this;
        return node.fields.reduce(function (obj, field) {
            var _a;
            obj.fields = __assign({}, obj.fields);
            obj.fields[field.fieldName] = (_a = _this.visit(field)) !== null && _a !== void 0 ? _a : {
                kind: 'ScalarStructure',
            };
            return obj;
        }, { kind: 'ObjectStructure' });
    };
    ProfileIOAnalyzer.prototype.visitPrimitiveTypeNameNode = function (node) {
        return {
            kind: 'PrimitiveStructure',
            type: node.name,
        };
    };
    ProfileIOAnalyzer.prototype.visitProfileDocumentNode = function (node) {
        var _this = this;
        var fields = node.definitions.filter(ast_1.isNamedFieldDefinitionNode);
        var models = node.definitions.filter(ast_1.isNamedModelDefinitionNode);
        this.initializeFields(fields);
        this.initializeModels(models);
        fields.forEach(function (field) { return _this.visit(field); });
        models.forEach(function (model) { return _this.visit(model); });
        var header = this.visit(node.header);
        var usecases = node.definitions
            .filter(ast_1.isUseCaseDefinitionNode)
            .map(function (definition) { return _this.visit(definition); });
        return addDoc(node.header, { header: header, usecases: usecases });
    };
    ProfileIOAnalyzer.prototype.visitProfileHeaderNode = function (node) {
        var header = {
            name: node.name,
            version: node.version,
        };
        if (node.scope) {
            header.scope = node.scope;
        }
        return addDoc(node, header);
    };
    ProfileIOAnalyzer.prototype.visitUnionDefinitionNode = function (node) {
        var _this = this;
        var union = {
            kind: 'UnionStructure',
            types: [],
        };
        node.types.forEach(function (type, i) {
            var structure = _this.visit(type);
            if (!profile_output_utils_1.isUnionStructure(structure)) {
                union.types[i] = structure;
            }
        });
        return union;
    };
    ProfileIOAnalyzer.prototype.visitUseCaseDefinitionNode = function (node) {
        return addDoc(node, {
            useCaseName: node.useCaseName,
            input: this.visit(node.input),
            result: this.visit(node.result),
            error: this.visit(node.error),
        });
    };
    /**
     * store the named fields for later reference
     */
    ProfileIOAnalyzer.prototype.initializeFields = function (fields) {
        var e_1, _a;
        try {
            for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                this.namedFields[field.fieldName] = field;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * store the named models for later reference
     */
    ProfileIOAnalyzer.prototype.initializeModels = function (models) {
        var e_2, _a;
        try {
            for (var models_1 = __values(models), models_1_1 = models_1.next(); !models_1_1.done; models_1_1 = models_1.next()) {
                var model = models_1_1.value;
                this.namedModels[model.modelName] = model;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (models_1_1 && !models_1_1.done && (_a = models_1.return)) _a.call(models_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return ProfileIOAnalyzer;
}());
exports.ProfileIOAnalyzer = ProfileIOAnalyzer;
//# sourceMappingURL=profile-io-analyzer.js.map