"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileId = exports.DEFAULT_PROFILE_VERSION = exports.ProfileVersion = void 0;
var ast_1 = require("@superfaceai/ast");
var _1 = require(".");
//TODO: move version stuff to verstion.ts??
/**
 * Class representing profile version, every property except label is required
 * Difference between this class and VersionRange is in optionality of properties - VersionRange is a more abstract structure
 */
var ProfileVersion = /** @class */ (function () {
    function ProfileVersion(major, minor, patch, label) {
        this.major = major;
        this.minor = minor;
        this.patch = patch;
        this.label = label;
    }
    ProfileVersion.fromVersionRange = function (input) {
        if (input.minor === undefined) {
            throw new Error("Invalid profile version: " + input.toString() + " - minor version is required");
        }
        if (input.patch === undefined) {
            throw new Error("Invalid profile version: " + input.toString() + " - patch version is required");
        }
        return new ProfileVersion(input.major, input.minor, input.patch, input.label);
    };
    ProfileVersion.fromString = function (input) {
        var _a = __read(ast_1.splitLimit(input, '-', 1), 2), restVersion = _a[0], label = _a[1];
        var _b = __read(ast_1.splitLimit(restVersion, '.', 2), 3), majorStr = _b[0], minorStr = _b[1], patchStr = _b[2];
        var major = _1.tryParseVersionNumber(majorStr);
        if (major === undefined) {
            throw new Error("Invalid profile version: " + input + " - major component: " + majorStr + " is not a valid number");
        }
        var minor = _1.tryParseVersionNumber(minorStr);
        if (minor === undefined) {
            throw new Error("Invalid profile version: " + input + " - minor component: " + minorStr + " is not a valid number");
        }
        var patch = _1.tryParseVersionNumber(patchStr);
        if (patch === undefined) {
            throw new Error("Invalid profile version: " + input + " - patch component: " + patchStr + " is not a valid number");
        }
        return new ProfileVersion(major, minor, patch, label);
    };
    ProfileVersion.fromParameters = function (params) {
        return new ProfileVersion(params.major, params.minor, params.patch, params.label);
    };
    ProfileVersion.prototype.toString = function () {
        var str = this.major + "." + this.minor + "." + this.patch;
        return this.label ? str + "-" + this.label : str;
    };
    return ProfileVersion;
}());
exports.ProfileVersion = ProfileVersion;
/**
 * Represents default value of profile version in ProfileId instance
 */
exports.DEFAULT_PROFILE_VERSION = ProfileVersion.fromParameters({
    major: 1,
    minor: 0,
    patch: 0,
});
var ProfileId = /** @class */ (function () {
    function ProfileId(scope, version, name) {
        this.scope = scope;
        this.version = version;
        this.name = name;
    }
    /**
     * Creates instance of ProfileId from string
     * @param profileId string in format {scope/}{name}{@major.minor.path-label} where scope,label and entire version is optional
     * @param versionString optional string representation of profile version, useful when creating ProfileId from two separate strings
     * @returns instance of ProfileId
     */
    ProfileId.fromId = function (profileId, versionString) {
        var parsed = _1.parseDocumentId(profileId);
        if (parsed.kind === 'error') {
            throw new Error("Invalid profile id: " + parsed.message);
        }
        //Name is required
        if (parsed.value.middle.length !== 1) {
            throw new Error("\"" + parsed.value.middle.join('.') + "\" is not a valid lowercase identifier");
        }
        var version = undefined;
        if (parsed.value.version) {
            version = ProfileVersion.fromVersionRange(parsed.value.version);
        }
        else if (versionString) {
            version = ProfileVersion.fromString(versionString);
        }
        return new ProfileId(parsed.value.scope, version, parsed.value.middle[0]);
    };
    ProfileId.fromParameters = function (params) {
        return new ProfileId(params.scope, params.version, params.name);
    };
    Object.defineProperty(ProfileId.prototype, "withoutVersion", {
        /**
         * Returns profile id without version
         */
        get: function () {
            return this.scope ? this.scope + "/" + this.name : this.name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Stringified profile id with version if version is defined
     * @returns stringified profile id
     */
    ProfileId.prototype.toString = function () {
        if (this.version) {
            return this.withoutVersion + ("@" + this.version.toString());
        }
        return this.withoutVersion;
    };
    return ProfileId;
}());
exports.ProfileId = ProfileId;
//# sourceMappingURL=profile.js.map