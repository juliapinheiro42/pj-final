"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionRange = void 0;
var ast_1 = require("@superfaceai/ast");
var parser_1 = require("./parser");
/**
 * Structure representing abstract semver version tag.
 */
var VersionRange = /** @class */ (function () {
    function VersionRange(major, minor, 
    /** Patch version cannot appear without minor version. */
    patch, 
    /** Label can appear even without major and minor version. */
    label) {
        this.major = major;
        this.minor = minor;
        this.patch = patch;
        this.label = label;
    }
    VersionRange.fromString = function (input) {
        var _a = __read(ast_1.splitLimit(input, '-', 1), 2), restVersion = _a[0], label = _a[1];
        var _b = __read(ast_1.splitLimit(restVersion, '.', 2), 3), majorStr = _b[0], minorStr = _b[1], patchStr = _b[2];
        var minor, patch = undefined;
        if (majorStr === undefined || majorStr === '') {
            throw new Error("Invalid version range: " + input + " - major component: " + majorStr + " is not a valid number");
        }
        var major = parser_1.tryParseVersionNumber(majorStr);
        if (major === undefined) {
            throw new Error("Invalid version range: " + input + " - major component: " + majorStr + " is not a valid number");
        }
        if (minorStr) {
            minor = parser_1.tryParseVersionNumber(minorStr);
            if (minor === undefined) {
                throw new Error("Invalid version range: " + input + " - minor component: " + minorStr + " is not a valid number");
            }
        }
        if (patchStr) {
            patch = parser_1.tryParseVersionNumber(patchStr);
            if (patch === undefined) {
                throw new Error("Invalid version range: " + input + " - patch component: " + patchStr + " is not a valid number");
            }
        }
        return new VersionRange(major, minor, patch, label);
    };
    VersionRange.fromParameters = function (params) {
        /** Patch version cannot appear without minor version. */
        if (params.patch !== undefined && params.minor === undefined) {
            throw new Error('Invalid Version Range - patch version cannot appear without minor version');
        }
        return new VersionRange(params.major, params.minor, params.patch, params.label);
    };
    VersionRange.prototype.toString = function () {
        var str = this.major.toString();
        str += this.minor !== undefined ? "." + this.minor : '';
        str += this.patch !== undefined ? "." + this.patch : '';
        return this.label ? str + "-" + this.label : str;
    };
    return VersionRange;
}());
exports.VersionRange = VersionRange;
//# sourceMappingURL=version.js.map