import { VersionRange } from '.';
/**
 * Class representing profile version, every property except label is required
 * Difference between this class and VersionRange is in optionality of properties - VersionRange is a more abstract structure
 */
export declare class ProfileVersion {
    readonly major: number;
    readonly minor: number;
    readonly patch: number;
    readonly label?: string | undefined;
    static fromVersionRange(input: VersionRange): ProfileVersion;
    static fromString(input: string): ProfileVersion;
    static fromParameters(params: {
        major: number;
        minor: number;
        patch: number;
        label?: string;
    }): ProfileVersion;
    toString(): string;
    private constructor();
}
/**
 * Represents default value of profile version in ProfileId instance
 */
export declare const DEFAULT_PROFILE_VERSION: ProfileVersion;
export declare class ProfileId {
    readonly scope: string | undefined;
    readonly version: ProfileVersion | undefined;
    readonly name: string;
    /**
     * Creates instance of ProfileId from string
     * @param profileId string in format {scope/}{name}{@major.minor.path-label} where scope,label and entire version is optional
     * @param versionString optional string representation of profile version, useful when creating ProfileId from two separate strings
     * @returns instance of ProfileId
     */
    static fromId(profileId: string, versionString?: string): ProfileId;
    static fromParameters(params: {
        scope?: string;
        version?: ProfileVersion;
        name: string;
    }): ProfileId;
    private constructor();
    /**
     * Returns profile id without version
     */
    get withoutVersion(): string;
    /**
     * Stringified profile id with version if version is defined
     * @returns stringified profile id
     */
    toString(): string;
}
