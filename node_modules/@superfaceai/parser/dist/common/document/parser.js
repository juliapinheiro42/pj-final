"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseMapId = exports.parseRevisionLabel = exports.parseProfileId = exports.parseDocumentId = exports.tryParseVersionNumber = void 0;
var ast_1 = require("@superfaceai/ast");
var version_1 = require("./version");
/**
 * Parses a singular version number or returns undefined.
 */
function tryParseVersionNumber(str) {
    try {
        return ast_1.parseVersionNumber(str);
    }
    catch (error) {
        return undefined;
    }
}
exports.tryParseVersionNumber = tryParseVersionNumber;
/** Parses document id.
 *
 * This parses a more general structure that fits both the profile and map id.
 */
function parseDocumentId(id) {
    var e_1, _a;
    // parse scope first
    var scope;
    var _b = __read(ast_1.splitLimit(id, '/', 1), 2), splitScope = _b[0], scopeRestId = _b[1];
    if (scopeRestId !== undefined) {
        scope = splitScope;
        if (!ast_1.isValidDocumentName(scope)) {
            return {
                kind: 'error',
                message: scope + " is not a valid lowercase identifier",
            };
        }
        // strip the scope
        id = scopeRestId;
    }
    var parsedVersion;
    var _c = __read(ast_1.splitLimit(id, '@', 1), 2), versionRestId = _c[0], splitVersion = _c[1];
    if (splitVersion !== undefined) {
        try {
            parsedVersion = version_1.VersionRange.fromString(splitVersion);
        }
        catch (error) {
            return {
                kind: 'error',
                message: splitVersion + " is not a valid version",
            };
        }
        // strip the version
        id = versionRestId;
    }
    var version = parsedVersion;
    var middle = id.split('.');
    try {
        for (var middle_1 = __values(middle), middle_1_1 = middle_1.next(); !middle_1_1.done; middle_1_1 = middle_1.next()) {
            var m = middle_1_1.value;
            if (!ast_1.isValidDocumentName(m)) {
                return {
                    kind: 'error',
                    message: "\"" + m + "\" is not a valid lowercase identifier",
                };
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (middle_1_1 && !middle_1_1.done && (_a = middle_1.return)) _a.call(middle_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        kind: 'parsed',
        value: {
            scope: scope,
            middle: middle,
            version: version,
        },
    };
}
exports.parseDocumentId = parseDocumentId;
/** Parses the id using `parseDocumentId`, checks that the `middle` is a valid `name`. */
function parseProfileId(id) {
    var baseResult = parseDocumentId(id);
    if (baseResult.kind === 'error') {
        return baseResult;
    }
    var base = baseResult.value;
    if (base.middle.length !== 1) {
        return {
            kind: 'error',
            message: "\"" + base.middle.join('.') + "\" is not a valid lowercase identifier",
        };
    }
    if (base.version === undefined) {
        return {
            kind: 'error',
            message: 'profile id requires a version tag',
        };
    }
    return {
        kind: 'parsed',
        value: {
            scope: base.scope,
            name: base.middle[0],
            version: base.version,
        },
    };
}
exports.parseProfileId = parseProfileId;
/**
 * Parses version label in format `revN`
 */
function parseRevisionLabel(label) {
    var value = label.trim();
    if (!value.startsWith('rev')) {
        return {
            kind: 'error',
            message: 'revision label must be in format `revN`',
        };
    }
    value = value.slice(3);
    var revision = tryParseVersionNumber(value);
    if (revision === undefined) {
        return {
            kind: 'error',
            message: 'revision label must be in format `revN` where N is a non-negative integer',
        };
    }
    return {
        kind: 'parsed',
        value: revision,
    };
}
exports.parseRevisionLabel = parseRevisionLabel;
/**
 * Parses the id using `parseDocumentId`, checks that the middle portion contains
 * a valid `name`, `provider` and parses the revision tag, if any.
 */
function parseMapId(id) {
    var baseResult = parseDocumentId(id);
    if (baseResult.kind === 'error') {
        return baseResult;
    }
    var base = baseResult.value;
    // parse name portion
    var _a = __read(base.middle, 3), name = _a[0], provider = _a[1], variant = _a[2];
    if (provider === undefined) {
        return {
            kind: 'error',
            message: 'provider is not a valid lowercase identifier',
        };
    }
    if (base.version === undefined) {
        return {
            kind: 'error',
            message: 'version must be present in map id',
        };
    }
    var revision = undefined;
    if (base.version.label !== undefined) {
        var parseResult = parseRevisionLabel(base.version.label);
        if (parseResult.kind === 'error') {
            return parseResult;
        }
        revision = parseResult.value;
    }
    var version = {
        major: base.version.major,
        minor: base.version.minor,
        revision: revision,
    };
    return {
        kind: 'parsed',
        value: {
            scope: base.scope,
            name: name,
            provider: provider,
            variant: variant,
            version: version,
        },
    };
}
exports.parseMapId = parseMapId;
//# sourceMappingURL=parser.js.map