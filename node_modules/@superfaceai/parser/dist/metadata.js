"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PARSED_AST_VERSION = exports.PARSED_VERSION = exports.parseMetadataVersion = exports.VERSION = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var metadataDebug = debug_1.default('superface-parser:metadata');
// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-var-requires
var packageJson = require('../package.json');
// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
exports.VERSION = packageJson.version;
function parseMetadataVersion(input) {
    var version = {
        major: 0,
        minor: 0,
        patch: 0,
        label: undefined,
    };
    var plusInInput = input.indexOf('+');
    if (plusInInput !== -1) {
        version.label = input.slice(plusInInput + 1);
        return version;
    }
    var _a = __read(ast_1.splitLimit(input, '-', 1), 2), verStr = _a[0], label = _a[1];
    var _b = __read(ast_1.splitLimit(verStr, '.', 2), 3), majorStr = _b[0], minorStr = _b[1], patchStr = _b[2];
    try {
        version.major = ast_1.parseVersionNumber(majorStr);
    }
    catch (_c) {
        metadataDebug("Major version \"" + majorStr + "\" is not a valid number");
    }
    if (minorStr !== undefined) {
        try {
            version.minor = ast_1.parseVersionNumber(minorStr);
        }
        catch (_d) {
            metadataDebug("Minor version \"" + minorStr + "\" is not a valid number");
        }
    }
    if (patchStr !== undefined) {
        try {
            version.patch = ast_1.parseVersionNumber(patchStr);
        }
        catch (_e) {
            metadataDebug("Patch version \"" + patchStr + "\" is not a valid number");
        }
    }
    version.label = label;
    return version;
}
exports.parseMetadataVersion = parseMetadataVersion;
exports.PARSED_VERSION = parseMetadataVersion(exports.VERSION);
exports.PARSED_AST_VERSION = parseMetadataVersion(ast_1.VERSION);
//# sourceMappingURL=metadata.js.map