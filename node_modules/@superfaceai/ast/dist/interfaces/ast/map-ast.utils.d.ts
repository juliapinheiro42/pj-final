import { AssignmentNode, CallStatementNode, ConditionAtomNode, HttpCallStatementNode, HttpRequestNode, HttpResponseHandlerNode, InlineCallNode, IterationAtomNode, JessieExpressionNode, MapASTNode, MapDefinitionNode, MapDocumentNode, MapHeaderNode, ObjectLiteralNode, OperationDefinitionNode, OutcomeStatementNode, PrimitiveLiteralNode, SetStatementNode } from './map-ast';
import { Guard } from './utils';
export declare const isAssignmentNode: Guard<AssignmentNode>;
export declare const isCallStatementNode: Guard<CallStatementNode>;
export declare const isConditionAtomNode: Guard<ConditionAtomNode>;
export declare const isHttpCallStatementNode: Guard<HttpCallStatementNode>;
export declare const isHttpRequestNode: Guard<HttpRequestNode>;
export declare const isHttpResponseHandlerNode: Guard<HttpResponseHandlerNode>;
export declare const isInlineCallNode: Guard<InlineCallNode>;
export declare const isIterationAtomNode: Guard<IterationAtomNode>;
export declare const isJessieExpressionNode: Guard<JessieExpressionNode>;
export declare const isMapASTNode: Guard<MapASTNode>;
export declare const isMapDefinitionNode: Guard<MapDefinitionNode>;
export declare const isMapDocumentNode: Guard<MapDocumentNode>;
export declare const isMapHeaderNode: Guard<MapHeaderNode>;
export declare const isObjectLiteralNode: Guard<ObjectLiteralNode>;
export declare const isOperationDefinitionNode: Guard<OperationDefinitionNode>;
export declare const isOutcomeStatementNode: Guard<OutcomeStatementNode>;
export declare const isPrimitiveLiteralNode: Guard<PrimitiveLiteralNode>;
export declare const isSetStatementNode: Guard<SetStatementNode>;
export declare function assertMapDocumentNode(node: unknown): MapDocumentNode;
export interface MapAstVisitor<R = unknown> {
    visit(node: MapASTNode): R;
    visitPrimitiveLiteralNode(node: PrimitiveLiteralNode): R;
    visitObjectLiteralNode(node: ObjectLiteralNode): R;
    visitJessieExpressionNode(node: JessieExpressionNode): R;
    visitAssignmentNode(node: AssignmentNode): R;
    visitConditionAtomNode(node: ConditionAtomNode): R;
    visitIterationAtomNode(node: IterationAtomNode): R;
    visitSetStatementNode(node: SetStatementNode): R;
    visitCallStatementNode(node: CallStatementNode): R;
    visitHttpResponseHandlerNode(node: HttpResponseHandlerNode): R;
    visitHttpCallStatementNode(node: HttpCallStatementNode): R;
    visitMapDefinitionNode(node: MapDefinitionNode): R;
    visitMapHeaderNode(node: MapHeaderNode): R;
    visitOperationDefinitionNode(node: OperationDefinitionNode): R;
    visitOutcomeStatementNode(node: OutcomeStatementNode): R;
    visitInlineCallNode(node: InlineCallNode): R;
    visitMapDocumentNode(node: MapDocumentNode): R;
}
