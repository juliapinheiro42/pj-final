export declare const SEMVER_REGEX: RegExp;
export declare const SEMVER_REGEX_SOURCE: string;
export declare const FILE_URI_PROTOCOL = "file://";
export declare const FILE_URI_REGEX: RegExp;
export declare const FILE_URI_REGEX_SOURCE: string;
/**
 * @pattern require('.').SEMVER_REGEX_SOURCE
 **/
export declare type SemanticVersion = string;
/**
 * @pattern require('.').FILE_URI_REGEX_SOURCE
 **/
export declare type UriPath = string;
export declare enum OnFail {
    NONE = "none",
    CIRCUIT_BREAKER = "circuit-breaker"
}
export declare enum BackoffKind {
    EXPONENTIAL = "exponential"
}
/**
 * RetryPolicy per usecase values.
 */
export declare type RetryPolicy = OnFail.NONE | OnFail.CIRCUIT_BREAKER | {
    kind: OnFail.NONE;
} | {
    kind: OnFail.CIRCUIT_BREAKER;
    /**
     * @TJS-minimum 0
     * @TJS-type integer
     **/
    maxContiguousRetries?: number | undefined;
    /**
     * @TJS-minimum 0
     * @TJS-type integer
     **/
    requestTimeout?: number | undefined;
    backoff?: BackoffKind.EXPONENTIAL | {
        kind: BackoffKind.EXPONENTIAL;
        /**
         * @TJS-minimum 0
         * @TJS-type integer
         **/
        start?: number | undefined;
        /**
         * @TJS-minimum 0
         * @TJS-type integer
         **/
        factor?: number | undefined;
    } | undefined;
};
export declare type NormalizedRetryPolicy = {
    kind: OnFail.NONE;
} | {
    kind: OnFail.CIRCUIT_BREAKER;
    /**
     * @TJS-minimum 0
     * @TJS-type integer
     **/
    maxContiguousRetries?: number | undefined;
    /**
     * @TJS-minimum 0
     * @TJS-type integer
     **/
    requestTimeout?: number | undefined;
    backoff?: {
        kind: BackoffKind.EXPONENTIAL;
        /**
         * @TJS-minimum 0
         * @TJS-type integer
         **/
        start?: number | undefined;
        /**
         * @TJS-minimum 0
         * @TJS-type integer
         **/
        factor?: number | undefined;
    } | undefined;
};
/**
 * Default per usecase values.
 */
export declare type UsecaseDefaults = {
    [usecase: string]: {
        input?: {
            [key: string]: unknown;
        } | undefined;
        providerFailover?: boolean | undefined;
    };
};
export declare type NormalizedUsecaseDefaults = {
    [usecase: string]: {
        input: {
            [key: string]: unknown;
        };
        providerFailover: boolean;
    };
};
/**
 * Default per provider usecase values.
 */
export declare type ProfileProviderDefaults = {
    [provider: string]: {
        input?: {
            [key: string]: unknown;
        } | undefined;
        retryPolicy?: RetryPolicy | undefined;
    };
};
export declare type NormalizedProfileProviderDefaults = {
    [provider: string]: {
        input: {
            [key: string]: unknown;
        };
        retryPolicy: NormalizedRetryPolicy;
    };
};
/**
 * Provider settings for specific profile.
 */
export declare type ProfileProviderSettings = {
    defaults?: ProfileProviderDefaults | undefined;
} & ({
    file: string;
} | {
    mapVariant?: string | undefined;
    mapRevision?: string | undefined;
});
export declare type NormalizedProfileProviderSettings = {
    file: string;
    defaults: NormalizedProfileProviderDefaults;
} | {
    mapVariant?: string | undefined;
    mapRevision?: string | undefined;
    defaults: NormalizedProfileProviderDefaults;
};
/**
 * Profile provider entry containing either `profileProviderSettings` or shorthands.
 */
export declare type ProfileProviderEntry = UriPath | ProfileProviderSettings;
/**
 * Expanded profile settings for one profile id.
 */
export declare type ProfileSettings = {
    priority?: string[] | undefined;
    defaults?: UsecaseDefaults | undefined;
    providers?: {
        [provider: string]: UriPath | ProfileProviderEntry;
    } | undefined;
} & ({
    version: SemanticVersion;
} | {
    file: string;
});
export declare type NormalizedProfileSettings = {
    priority: string[];
    defaults: NormalizedUsecaseDefaults;
    providers: {
        [provider: string]: NormalizedProfileProviderSettings;
    };
} & ({
    version: SemanticVersion;
} | {
    file: string;
    priority: string[];
    defaults: NormalizedUsecaseDefaults;
    providers: {
        [provider: string]: NormalizedProfileProviderSettings;
    };
});
/**
 * Profile entry containing either `profileSettings` or shorthands.
 */
export declare type ProfileEntry = SemanticVersion | UriPath | ProfileSettings;
export declare type IdBase = {
    id: string;
};
export declare type ApiKeySecurityValues = IdBase & {
    apikey: string;
};
export declare type BasicAuthSecurityValues = IdBase & {
    username: string;
    password: string;
};
export declare type BearerTokenSecurityValues = IdBase & {
    token: string;
};
export declare type DigestSecurityValues = IdBase & {
    digest: string;
};
/**
 * Authorization variables.
 */
export declare type SecurityValues = ApiKeySecurityValues | BasicAuthSecurityValues | BearerTokenSecurityValues | DigestSecurityValues;
/**
 * Expanded provider settings for one provider name.
 */
export declare type ProviderSettings = {
    file?: string | undefined;
    security?: SecurityValues[] | undefined;
    parameters?: {
        [key: string]: string;
    } | undefined;
};
export declare type NormalizedProviderSettings = {
    file?: string | undefined;
    security: SecurityValues[];
    parameters: {
        [key: string]: string;
    };
};
export declare type ProviderEntry = UriPath | ProviderSettings;
export declare type SuperJsonDocument = {
    profiles?: {
        [profile: string]: ProfileEntry;
    } | undefined;
    providers?: {
        [provider: string]: ProviderEntry;
    } | undefined;
};
export declare type NormalizedSuperJsonDocument = {
    profiles: {
        [profile: string]: NormalizedProfileSettings;
    };
    providers: {
        [provider: string]: NormalizedProviderSettings;
    };
};
export declare type AnonymizedSuperJsonDocument = {
    profiles: Record<string, {
        version: SemanticVersion | 'file';
        providers: {
            provider: string;
            priority?: number | undefined;
            version: SemanticVersion | 'file';
        }[];
    }>;
    providers: string[];
};
