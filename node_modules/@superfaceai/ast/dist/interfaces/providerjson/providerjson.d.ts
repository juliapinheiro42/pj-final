export declare const PROVIDER_NAME_REGEX: RegExp;
export declare const PROVIDER_NAME_REGEX_SOURCE: string;
/**
 * Type of security value.
 */
export declare enum SecurityType {
    APIKEY = "apiKey",
    HTTP = "http"
}
export declare enum ApiKeyPlacement {
    HEADER = "header",
    BODY = "body",
    PATH = "path",
    QUERY = "query"
}
export declare enum HttpScheme {
    BASIC = "basic",
    BEARER = "bearer",
    DIGEST = "digest"
}
/**
 * Security scheme for api key authorization.
 */
export declare type ApiKeySecurityScheme = {
    id: string;
    type: SecurityType.APIKEY;
    in: ApiKeyPlacement;
    name?: string | undefined;
};
/**
 * Security scheme for basic authorization.
 */
export declare type BasicAuthSecurityScheme = {
    id: string;
    type: SecurityType.HTTP;
    scheme: HttpScheme.BASIC;
};
/**
 * Security scheme for bearer authorization.
 */
export declare type BearerTokenSecurityScheme = {
    id: string;
    type: SecurityType.HTTP;
    scheme: HttpScheme.BEARER;
    bearerFormat?: string | undefined;
};
/**
 * Security scheme for digest authorization.
 */
export declare type DigestSecurityScheme = {
    id: string;
    type: SecurityType.HTTP;
    scheme: HttpScheme.DIGEST;
};
/**
 * Type describing general security scheme.
 */
export declare type SecurityScheme = ApiKeySecurityScheme | BasicAuthSecurityScheme | BearerTokenSecurityScheme | DigestSecurityScheme;
export declare type ProviderService = {
    id: string;
    baseUrl: string;
};
/**
 * Parameter needed for use of provider.
 */
export declare type IntegrationParameter = {
    /**
     * @pattern require('../ast/utils').IDENTIFIER_RE_SOURCE
     */
    name: string;
    description?: string | undefined;
    default?: string | undefined;
};
/**
 * Type decribing provider.json document.
 */
export declare type ProviderJson = {
    /**
     * @pattern require('.').PROVIDER_NAME_REGEX_SOURCE
     */
    name: string;
    services: ProviderService[];
    securitySchemes?: SecurityScheme[] | undefined;
    defaultService: string;
    parameters?: IntegrationParameter[] | undefined;
};
