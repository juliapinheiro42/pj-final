import { AnonymizedSuperJsonDocument, NormalizedSuperJsonDocument, ProfileEntry, ProfileProviderEntry, ProviderEntry, SuperJsonDocument, UsecaseDefaults } from '@superfaceai/ast';
import { Result } from '../../lib';
import { SDKExecutionError } from '../errors';
export declare const SUPERFACE_DIR = "superface";
export declare const META_FILE = "super.json";
export declare const SUPER_PATH: string;
export declare class SuperJson {
    private normalizedCache?;
    document: SuperJsonDocument;
    readonly path: string;
    constructor(document?: SuperJsonDocument, path?: string);
    /**
     * Detects the existence of a `super.json` file in specified number of levels
     * of parent directories.
     *
     * @param cwd - currently scanned working directory
     *
     * Returns relative path to a directory where `super.json` is detected.
     */
    static detectSuperJson(cwd: string, level?: number): Promise<string | undefined>;
    static parse(input: unknown): Result<SuperJsonDocument, SDKExecutionError>;
    static loadSync(path?: string): Result<SuperJson, SDKExecutionError>;
    /**
     * Attempts to load super.json file from expected location `cwd/superface/super.json`
     */
    static load(path?: string): Promise<Result<SuperJson, SDKExecutionError>>;
    /**
     * Merge profile defaults into the document.
     *
     * Creates the profile if it doesn't exist.
     */
    mergeProfileDefaults(profileName: string, payload: UsecaseDefaults): boolean;
    /**
     * Merge a profile into the document.
     *
     * Creates the profile if it doesn't exist.
     */
    mergeProfile(profileName: string, payload: ProfileEntry): boolean;
    /**
     * Sets (completely overwrites) a profile in the document.
     *
     * `payload === undefined` deletes the profile.
     */
    setProfile(profileName: string, payload: ProfileEntry | undefined): boolean;
    /**
     * Merge profile provider into the document.
     *
     * Creates the profile and the profile provider if it doesn't exist.
     */
    mergeProfileProvider(profileName: string, providerName: string, payload: ProfileProviderEntry): boolean;
    /**
     * Sets (completely overwrites) a profile provider in the document.
     *
     * `payload === undefined` deletes the entry.
     */
    setProfileProvider(profileName: string, providerName: string, payload: ProfileProviderEntry | undefined): boolean;
    /**
     * Swaps profile provider variant.
     */
    swapProfileProviderVariant(profileName: string, providerName: string, variant: {
        kind: 'local';
        file: string;
    } | {
        kind: 'remote';
        mapVariant?: string;
        mapRevision?: string;
    }): boolean;
    /**
     * Merge a provider into the document.
     *
     * Creates the provider if it doesn't exist.
     */
    mergeProvider(providerName: string, payload: ProviderEntry): boolean;
    /**
     * Sets (completely overwrites) a provider in the document.
     *
     * `payload === undefined` deletes the provider.
     */
    setProvider(providerName: string, payload: ProviderEntry | undefined): boolean;
    swapProviderVariant(providerName: string, variant: {
        kind: 'local';
        file: string;
    } | {
        kind: 'remote';
    }): boolean;
    /**
     * Sets the priority array of the profile.
     *
     * Throws if the profile does not exist or of the providers don't exist.
     */
    setPriority(profileName: string, providersSortedByPriority: string[]): boolean;
    /**
     * Returns a relative path relative to `path` from `dirname(this.path)`.
     */
    relativePath(path: string): string;
    /**
     * Resolves relative paths as relative to `dirname(this.path)`.
     */
    resolvePath(path: string): string;
    get stringified(): string;
    get normalized(): NormalizedSuperJsonDocument;
    get anonymized(): AnonymizedSuperJsonDocument;
    get configHash(): string;
}
