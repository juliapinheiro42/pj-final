"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuperJson = exports.SUPER_PATH = exports.META_FILE = exports.SUPERFACE_DIR = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var fs_1 = require("fs");
var path_1 = require("path");
var config_1 = require("../../config");
var lib_1 = require("../../lib");
var config_hash_1 = require("../../lib/config-hash");
var io_1 = require("../../lib/io");
var errors_helpers_1 = require("../errors.helpers");
var mutate_1 = require("./mutate");
var normalize_1 = require("./normalize");
var debug = debug_1.default('superface:superjson');
exports.SUPERFACE_DIR = 'superface';
exports.META_FILE = 'super.json';
exports.SUPER_PATH = path_1.join(exports.SUPERFACE_DIR, exports.META_FILE);
var SuperJson = /** @class */ (function () {
    function SuperJson(document, path) {
        this.document = document !== null && document !== void 0 ? document : {};
        this.path = path !== null && path !== void 0 ? path : '';
    }
    // loading and parsing //
    /**
     * Detects the existence of a `super.json` file in specified number of levels
     * of parent directories.
     *
     * @param cwd - currently scanned working directory
     *
     * Returns relative path to a directory where `super.json` is detected.
     */
    SuperJson.detectSuperJson = function (cwd, level) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, io_1.isAccessible(path_1.join(cwd, exports.META_FILE))];
                    case 1:
                        // check whether super.json is accessible in cwd
                        if (_a.sent()) {
                            return [2 /*return*/, path_1.normalize(path_1.relative(process.cwd(), cwd))];
                        }
                        return [4 /*yield*/, io_1.isAccessible(path_1.join(cwd, exports.SUPER_PATH))];
                    case 2:
                        // check whether super.json is accessible in cwd/superface
                        if (_a.sent()) {
                            return [2 /*return*/, path_1.normalize(path_1.relative(process.cwd(), path_1.join(cwd, exports.SUPERFACE_DIR)))];
                        }
                        // default behaviour - do not scan outside cwd
                        if (level === undefined || level < 1) {
                            return [2 /*return*/, undefined];
                        }
                        // check if user has permissions outside cwd
                        cwd = path_1.join(cwd, '..');
                        return [4 /*yield*/, io_1.isAccessible(cwd)];
                    case 3:
                        if (!(_a.sent())) {
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, SuperJson.detectSuperJson(cwd, --level)];
                    case 4: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SuperJson.parse = function (input) {
        try {
            var superdocument = ast_1.assertSuperJsonDocument(input);
            return lib_1.ok(superdocument);
        }
        catch (e) {
            return lib_1.err(errors_helpers_1.superJsonFormatError(errors_helpers_1.ensureErrorSubclass(e)));
        }
    };
    SuperJson.loadSync = function (path) {
        var superfile = path !== null && path !== void 0 ? path : config_1.Config.instance().superfacePath;
        try {
            var statInfo = fs_1.statSync(superfile);
            if (!statInfo.isFile()) {
                return lib_1.err(errors_helpers_1.superJsonNotAFileError(superfile));
            }
        }
        catch (e) {
            return lib_1.err(errors_helpers_1.superJsonNotFoundError(superfile, errors_helpers_1.ensureErrorSubclass(e)));
        }
        var superjson;
        try {
            var superraw = fs_1.readFileSync(superfile, { encoding: 'utf-8' });
            superjson = JSON.parse(superraw);
        }
        catch (e) {
            return lib_1.err(errors_helpers_1.superJsonReadError(errors_helpers_1.ensureErrorSubclass(e)));
        }
        var superdocument = SuperJson.parse(superjson);
        if (superdocument.isErr()) {
            return lib_1.err(superdocument.error);
        }
        debug("loaded super.json from " + superfile);
        return lib_1.ok(new SuperJson(superdocument.value, superfile));
    };
    /**
     * Attempts to load super.json file from expected location `cwd/superface/super.json`
     */
    SuperJson.load = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var superfile, statInfo, e_1, superjson, superraw, e_2, superdocument;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        superfile = path !== null && path !== void 0 ? path : config_1.Config.instance().superfacePath;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fs_1.promises.stat(superfile)];
                    case 2:
                        statInfo = _a.sent();
                        if (!statInfo.isFile()) {
                            return [2 /*return*/, lib_1.err(errors_helpers_1.superJsonNotAFileError(superfile))];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        return [2 /*return*/, lib_1.err(errors_helpers_1.superJsonNotFoundError(superfile, errors_helpers_1.ensureErrorSubclass(e_1)))];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, fs_1.promises.readFile(superfile, { encoding: 'utf-8' })];
                    case 5:
                        superraw = _a.sent();
                        superjson = JSON.parse(superraw);
                        return [3 /*break*/, 7];
                    case 6:
                        e_2 = _a.sent();
                        return [2 /*return*/, lib_1.err(errors_helpers_1.superJsonReadError(errors_helpers_1.ensureErrorSubclass(e_2)))];
                    case 7:
                        superdocument = SuperJson.parse(superjson);
                        if (superdocument.isErr()) {
                            return [2 /*return*/, lib_1.err(superdocument.error)];
                        }
                        debug("loaded super.json from " + superfile);
                        return [2 /*return*/, lib_1.ok(new SuperJson(superdocument.value, superfile))];
                }
            });
        });
    };
    // mutation //
    /**
     * Merge profile defaults into the document.
     *
     * Creates the profile if it doesn't exist.
     */
    SuperJson.prototype.mergeProfileDefaults = function (profileName, payload) {
        var changed = mutate_1.mergeProfileDefaults(this.document, profileName, payload);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    /**
     * Merge a profile into the document.
     *
     * Creates the profile if it doesn't exist.
     */
    SuperJson.prototype.mergeProfile = function (profileName, payload) {
        var changed = mutate_1.mergeProfile(this.document, profileName, payload);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    /**
     * Sets (completely overwrites) a profile in the document.
     *
     * `payload === undefined` deletes the profile.
     */
    SuperJson.prototype.setProfile = function (profileName, payload) {
        var changed = mutate_1.setProfile(this.document, profileName, payload);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    /**
     * Merge profile provider into the document.
     *
     * Creates the profile and the profile provider if it doesn't exist.
     */
    SuperJson.prototype.mergeProfileProvider = function (profileName, providerName, payload) {
        var changed = mutate_1.mergeProfileProvider(this.document, profileName, providerName, payload);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    /**
     * Sets (completely overwrites) a profile provider in the document.
     *
     * `payload === undefined` deletes the entry.
     */
    SuperJson.prototype.setProfileProvider = function (profileName, providerName, payload) {
        var changed = mutate_1.setProfileProvider(this.document, profileName, providerName, payload);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    /**
     * Swaps profile provider variant.
     */
    SuperJson.prototype.swapProfileProviderVariant = function (profileName, providerName, variant) {
        var changed = mutate_1.swapProfileProviderVariant(this.document, profileName, providerName, variant);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    /**
     * Merge a provider into the document.
     *
     * Creates the provider if it doesn't exist.
     */
    SuperJson.prototype.mergeProvider = function (providerName, payload) {
        var changed = mutate_1.mergeProvider(this.document, providerName, payload);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    /**
     * Sets (completely overwrites) a provider in the document.
     *
     * `payload === undefined` deletes the provider.
     */
    SuperJson.prototype.setProvider = function (providerName, payload) {
        var changed = mutate_1.setProvider(this.document, providerName, payload);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    SuperJson.prototype.swapProviderVariant = function (providerName, variant) {
        var changed = mutate_1.swapProviderVariant(this.document, providerName, variant);
        if (changed) {
            this.normalizedCache = undefined;
        }
        return changed;
    };
    /**
     * Sets the priority array of the profile.
     *
     * Throws if the profile does not exist or of the providers don't exist.
     */
    SuperJson.prototype.setPriority = function (profileName, providersSortedByPriority) {
        var result = mutate_1.setPriority(this.document, profileName, providersSortedByPriority);
        if (result.isOk()) {
            this.normalizedCache = undefined;
        }
        return result.unwrap();
    };
    // utilities //
    /**
     * Returns a relative path relative to `path` from `dirname(this.path)`.
     */
    SuperJson.prototype.relativePath = function (path) {
        return path_1.relative(path_1.dirname(this.path), path);
    };
    /**
     * Resolves relative paths as relative to `dirname(this.path)`.
     */
    SuperJson.prototype.resolvePath = function (path) {
        return path_1.resolve(path_1.dirname(this.path), path);
    };
    Object.defineProperty(SuperJson.prototype, "stringified", {
        // other representations //
        get: function () {
            return JSON.stringify(this.document, undefined, 2);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SuperJson.prototype, "normalized", {
        get: function () {
            if (this.normalizedCache !== undefined) {
                return this.normalizedCache;
            }
            this.normalizedCache = normalize_1.normalizeSuperJsonDocument(this.document);
            return this.normalizedCache;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SuperJson.prototype, "anonymized", {
        get: function () {
            var e_3, _a, e_4, _b;
            var profiles = {};
            try {
                for (var _c = __values(Object.entries(this.normalized.profiles)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read(_d.value, 2), profile = _e[0], profileEntry = _e[1];
                    var providers = [];
                    var _loop_1 = function (provider, providerEntry) {
                        var anonymizedProvider = {
                            provider: provider,
                            version: 'unknown',
                        };
                        var providerPriority = profileEntry.priority.findIndex(function (providerName) { return provider === providerName; });
                        if (providerPriority > -1) {
                            anonymizedProvider.priority = providerPriority;
                        }
                        if ('file' in providerEntry) {
                            anonymizedProvider.version = 'file';
                        }
                        else if ('mapRevision' in providerEntry &&
                            providerEntry.mapRevision !== undefined) {
                            anonymizedProvider.version = providerEntry.mapRevision;
                            if (providerEntry.mapVariant !== undefined) {
                                anonymizedProvider.version += "-" + providerEntry.mapVariant;
                            }
                        }
                        providers.push(anonymizedProvider);
                    };
                    try {
                        for (var _f = (e_4 = void 0, __values(Object.entries(profileEntry.providers))), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var _h = __read(_g.value, 2), provider = _h[0], providerEntry = _h[1];
                            _loop_1(provider, providerEntry);
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    profiles[profile] = {
                        version: 'version' in profileEntry ? profileEntry.version : 'file',
                        providers: providers,
                    };
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return {
                profiles: profiles,
                providers: Object.keys(this.normalized.providers),
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SuperJson.prototype, "configHash", {
        get: function () {
            var e_5, _a;
            // <profile>:<version>,<provider>:<priority>:[<version | file>],<provider>:<path>
            var profileValues = [];
            try {
                for (var _b = __values(Object.entries(this.anonymized.profiles)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), profile = _d[0], profileEntry = _d[1];
                    var providers = Object.entries(profileEntry.providers).map(function (_a) {
                        var _b = __read(_a, 2), provider = _b[0], providerEntry = _b[1];
                        return __spreadArray([
                            provider,
                            providerEntry.priority
                        ], __read((providerEntry.version !== undefined
                            ? [providerEntry.version]
                            : []))).join(':');
                    });
                    // sort by provider name to be reproducible
                    providers.sort();
                    profileValues.push(__spreadArray([profile + ":" + profileEntry.version], __read(providers)).join(','));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            // sort by profile name to be reproducible
            profileValues.sort();
            // Copy and sort
            var providerValues = this.anonymized.providers
                .map(function (provider) { return provider; })
                .sort();
            return config_hash_1.configHash(__spreadArray(__spreadArray([], __read(profileValues)), __read(providerValues)));
        },
        enumerable: false,
        configurable: true
    });
    return SuperJson;
}());
exports.SuperJson = SuperJson;
//# sourceMappingURL=superjson.js.map