"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeSuperJsonDocument = exports.normalizeProviderSettings = exports.normalizeProfileSettings = exports.normalizeProfileProviderDefaults = exports.normalizeUsecaseDefaults = exports.normalizeRetryPolicy = exports.normalizeProfileProviderSettings = void 0;
var ast_1 = require("@superfaceai/ast");
var env_1 = require("../../lib/env");
var object_1 = require("../../lib/object");
var errors_1 = require("../errors");
var errors_helpers_1 = require("../errors.helpers");
var variables_1 = require("../interpreter/variables");
function normalizeProfileProviderSettings(profileProviderSettings, baseDefaults) {
    if (profileProviderSettings === undefined) {
        return {
            defaults: {},
        };
    }
    if (typeof profileProviderSettings === 'string') {
        if (ast_1.isFileURIString(profileProviderSettings)) {
            return {
                file: profileProviderSettings.slice(ast_1.FILE_URI_PROTOCOL.length),
                defaults: {},
            };
        }
        throw errors_helpers_1.invalidProfileProviderError(profileProviderSettings);
    }
    var normalizedSettings;
    if ('file' in profileProviderSettings) {
        normalizedSettings = {
            file: profileProviderSettings.file,
            defaults: {},
        };
    }
    else {
        normalizedSettings = {
            mapVariant: profileProviderSettings.mapVariant,
            mapRevision: profileProviderSettings.mapRevision,
            defaults: {},
        };
    }
    normalizedSettings.defaults = normalizeProfileProviderDefaults(profileProviderSettings.defaults, baseDefaults);
    return normalizedSettings;
}
exports.normalizeProfileProviderSettings = normalizeProfileProviderSettings;
function normalizeRetryPolicy(retryPolicy, base) {
    var _a, _b;
    if (retryPolicy === undefined) {
        if (base === undefined) {
            return { kind: ast_1.OnFail.NONE };
        }
        else {
            return normalizeRetryPolicy(base);
        }
    }
    if (retryPolicy === ast_1.OnFail.CIRCUIT_BREAKER) {
        return {
            kind: ast_1.OnFail.CIRCUIT_BREAKER,
        };
    }
    if (retryPolicy === ast_1.OnFail.NONE ||
        ('kind' in retryPolicy && retryPolicy.kind === ast_1.OnFail.NONE)) {
        return { kind: ast_1.OnFail.NONE };
    }
    var baseOnFail = (base === null || base === void 0 ? void 0 : base.kind) === ast_1.OnFail.NONE ? undefined : base;
    var normalizeBackoff = function () {
        var _a, _b, _c, _d, _e, _f;
        if (!retryPolicy.backoff) {
            return;
        }
        if (retryPolicy.backoff === ast_1.BackoffKind.EXPONENTIAL) {
            return { kind: ast_1.BackoffKind.EXPONENTIAL };
        }
        if ('kind' in retryPolicy.backoff &&
            retryPolicy.backoff.kind === ast_1.BackoffKind.EXPONENTIAL) {
            return {
                kind: ast_1.BackoffKind.EXPONENTIAL,
                start: (_b = (_a = retryPolicy.backoff) === null || _a === void 0 ? void 0 : _a.start) !== null && _b !== void 0 ? _b : (_c = baseOnFail === null || baseOnFail === void 0 ? void 0 : baseOnFail.backoff) === null || _c === void 0 ? void 0 : _c.start,
                factor: (_e = (_d = retryPolicy.backoff) === null || _d === void 0 ? void 0 : _d.factor) !== null && _e !== void 0 ? _e : (_f = baseOnFail === null || baseOnFail === void 0 ? void 0 : baseOnFail.backoff) === null || _f === void 0 ? void 0 : _f.factor,
            };
        }
        throw errors_helpers_1.invalidBackoffEntryError(retryPolicy.backoff.kind);
    };
    return {
        kind: ast_1.OnFail.CIRCUIT_BREAKER,
        maxContiguousRetries: (_a = retryPolicy.maxContiguousRetries) !== null && _a !== void 0 ? _a : baseOnFail === null || baseOnFail === void 0 ? void 0 : baseOnFail.maxContiguousRetries,
        requestTimeout: (_b = retryPolicy.requestTimeout) !== null && _b !== void 0 ? _b : baseOnFail === null || baseOnFail === void 0 ? void 0 : baseOnFail.requestTimeout,
        backoff: normalizeBackoff(),
    };
}
exports.normalizeRetryPolicy = normalizeRetryPolicy;
function normalizeUsecaseDefaults(defaults, base) {
    var e_1, _a;
    var _b, _c, _d, _e;
    if (defaults === undefined) {
        if (base == undefined) {
            return {};
        }
        else {
            return normalizeUsecaseDefaults(base);
        }
    }
    var normalized = base !== undefined ? object_1.clone(base) : {};
    try {
        for (var _f = __values(Object.entries(defaults)), _g = _f.next(); !_g.done; _g = _f.next()) {
            var _h = __read(_g.value, 2), usecase = _h[0], defs = _h[1];
            var previousInput = (_c = variables_1.castToNonPrimitive((_b = normalized[usecase]) === null || _b === void 0 ? void 0 : _b.input)) !== null && _c !== void 0 ? _c : {};
            var providerFailover = defs.providerFailover;
            if (providerFailover === undefined) {
                providerFailover = (_d = normalized[usecase]) === null || _d === void 0 ? void 0 : _d.providerFailover;
            }
            normalized[usecase] = {
                input: variables_1.mergeVariables(previousInput, (_e = variables_1.castToNonPrimitive(defs.input)) !== null && _e !== void 0 ? _e : {}),
                providerFailover: providerFailover !== null && providerFailover !== void 0 ? providerFailover : false,
            };
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return env_1.resolveEnvRecord(normalized);
}
exports.normalizeUsecaseDefaults = normalizeUsecaseDefaults;
function normalizeProfileProviderDefaults(defaults, base) {
    var e_2, _a;
    var _b, _c, _d;
    if (defaults === undefined) {
        if (base == undefined) {
            return {};
        }
        else {
            return normalizeProfileProviderDefaults(base);
        }
    }
    var normalized = {};
    try {
        for (var _e = __values(Object.entries(defaults)), _f = _e.next(); !_f.done; _f = _e.next()) {
            var _g = __read(_f.value, 2), usecase = _g[0], defs = _g[1];
            var previousInput = (_c = variables_1.castToNonPrimitive((_b = base === null || base === void 0 ? void 0 : base[usecase]) === null || _b === void 0 ? void 0 : _b.input)) !== null && _c !== void 0 ? _c : {};
            normalized[usecase] = {
                input: variables_1.mergeVariables(previousInput, (_d = variables_1.castToNonPrimitive(defs.input)) !== null && _d !== void 0 ? _d : {}),
                retryPolicy: normalizeRetryPolicy(defs.retryPolicy),
            };
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return env_1.resolveEnvRecord(normalized);
}
exports.normalizeProfileProviderDefaults = normalizeProfileProviderDefaults;
function normalizeProfileSettings(profileEntry, topProviderOrder) {
    var e_3, _a;
    var _b;
    if (typeof profileEntry === 'string') {
        if (ast_1.isVersionString(profileEntry)) {
            return {
                version: profileEntry,
                priority: topProviderOrder,
                defaults: {},
                providers: {},
            };
        }
        if (ast_1.isFileURIString(profileEntry)) {
            return {
                file: profileEntry.slice(ast_1.FILE_URI_PROTOCOL.length),
                priority: topProviderOrder,
                defaults: {},
                providers: {},
            };
        }
        throw new errors_1.UnexpectedError('Invalid profile entry format: ' + profileEntry);
    }
    var normalizedSettings;
    if ('file' in profileEntry) {
        normalizedSettings = {
            file: profileEntry.file,
            priority: profileEntry.priority || [],
            defaults: {},
            providers: {},
        };
    }
    else {
        normalizedSettings = {
            version: profileEntry.version,
            priority: profileEntry.priority || [],
            defaults: {},
            providers: {},
        };
    }
    normalizedSettings.defaults = normalizeUsecaseDefaults(profileEntry.defaults);
    try {
        for (var _c = __values(Object.entries((_b = profileEntry.providers) !== null && _b !== void 0 ? _b : {})), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), providerName = _e[0], profileProviderSettings = _e[1];
            normalizedSettings.providers[providerName] =
                normalizeProfileProviderSettings(profileProviderSettings, normalizedSettings.defaults);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_3) throw e_3.error; }
    }
    if (normalizedSettings.priority.length === 0) {
        var providerOrder = Object.keys(profileEntry.providers || {});
        normalizedSettings.priority =
            providerOrder.length > 0 ? providerOrder : topProviderOrder;
    }
    if (normalizedSettings.priority.length === 0) {
        var providerOrder = Object.keys(profileEntry.providers || {});
        normalizedSettings.priority =
            providerOrder.length > 0 ? providerOrder : topProviderOrder;
    }
    return normalizedSettings;
}
exports.normalizeProfileSettings = normalizeProfileSettings;
function normalizeProviderSettings(providerEntry) {
    var _a, _b;
    if (typeof providerEntry === 'string') {
        if (ast_1.isFileURIString(providerEntry)) {
            return {
                file: providerEntry.slice(ast_1.FILE_URI_PROTOCOL.length),
                security: [],
                parameters: {},
            };
        }
        throw new errors_1.UnexpectedError('Invalid provider entry format: ' + providerEntry);
    }
    return {
        file: providerEntry.file,
        security: (_b = (_a = providerEntry.security) === null || _a === void 0 ? void 0 : _a.map(function (entry) { return env_1.resolveEnvRecord(entry); })) !== null && _b !== void 0 ? _b : [],
        parameters: providerEntry.parameters
            ? env_1.resolveEnvRecord(providerEntry.parameters)
            : {},
    };
}
exports.normalizeProviderSettings = normalizeProviderSettings;
/** Returns a cached normalized clone of the document. */
function normalizeSuperJsonDocument(originalDocument) {
    var e_4, _a, e_5, _b;
    var _c, _d, _e;
    // clone
    var document = object_1.clone(originalDocument);
    var profiles = (_c = document.profiles) !== null && _c !== void 0 ? _c : {};
    var normalizedProfiles = {};
    var topProviderOrder = Object.keys((_d = originalDocument.providers) !== null && _d !== void 0 ? _d : {});
    try {
        for (var _f = __values(Object.entries(profiles)), _g = _f.next(); !_g.done; _g = _f.next()) {
            var _h = __read(_g.value, 2), profileId = _h[0], profileEntry = _h[1];
            normalizedProfiles[profileId] = normalizeProfileSettings(profileEntry, topProviderOrder);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        }
        finally { if (e_4) throw e_4.error; }
    }
    var providers = (_e = document.providers) !== null && _e !== void 0 ? _e : {};
    var normalizedProviders = {};
    try {
        for (var _j = __values(Object.entries(providers)), _k = _j.next(); !_k.done; _k = _j.next()) {
            var _l = __read(_k.value, 2), providerName = _l[0], providerEntry = _l[1];
            normalizedProviders[providerName] =
                normalizeProviderSettings(providerEntry);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return {
        profiles: normalizedProfiles,
        providers: normalizedProviders,
    };
}
exports.normalizeSuperJsonDocument = normalizeSuperJsonDocument;
//# sourceMappingURL=normalize.js.map