"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyDigest = exports.applyBearerToken = exports.applyBasicAuth = exports.applyHttpAuth = exports.applyApiKeyAuth = exports.applyApiKeyAuthInBody = exports.AUTH_HEADER_NAME = void 0;
var ast_1 = require("@superfaceai/ast");
var errors_1 = require("../../errors");
var errors_helpers_1 = require("../../errors.helpers");
var DEFAULT_AUTHORIZATION_HEADER_NAME = 'Authorization';
exports.AUTH_HEADER_NAME = 'Authorization';
function applyApiKeyAuthInBody(requestBody, referenceTokens, apikey, visitedReferenceTokens) {
    var _a;
    if (visitedReferenceTokens === void 0) { visitedReferenceTokens = []; }
    if (typeof requestBody !== 'object' || Array.isArray(requestBody)) {
        var valueLocation = visitedReferenceTokens.length
            ? "value at /" + visitedReferenceTokens.join('/')
            : 'body';
        var bodyType = Array.isArray(requestBody) ? 'Array' : typeof requestBody;
        throw errors_helpers_1.apiKeyInBodyError(valueLocation, bodyType);
    }
    var token = referenceTokens.shift();
    if (token === undefined) {
        return apikey;
    }
    var segVal = (_a = requestBody[token]) !== null && _a !== void 0 ? _a : {};
    requestBody[token] = applyApiKeyAuthInBody(segVal, referenceTokens, apikey, __spreadArray(__spreadArray([], __read(visitedReferenceTokens)), [
        token,
    ]));
    return requestBody;
}
exports.applyApiKeyAuthInBody = applyApiKeyAuthInBody;
function applyApiKeyAuth(context, configuration) {
    var _a;
    var name = configuration.name || DEFAULT_AUTHORIZATION_HEADER_NAME;
    switch (configuration.in) {
        case ast_1.ApiKeyPlacement.HEADER:
            context.headers[name] = configuration.apikey;
            break;
        case ast_1.ApiKeyPlacement.BODY:
            context.requestBody = applyApiKeyAuthInBody((_a = context.requestBody) !== null && _a !== void 0 ? _a : {}, name.startsWith('/') ? name.slice(1).split('/') : [name], configuration.apikey);
            break;
        case ast_1.ApiKeyPlacement.PATH:
            context.pathParameters[name] = configuration.apikey;
            break;
        case ast_1.ApiKeyPlacement.QUERY:
            context.queryAuth[name] = configuration.apikey;
            break;
    }
}
exports.applyApiKeyAuth = applyApiKeyAuth;
function applyHttpAuth(context, configuration) {
    switch (configuration.scheme) {
        case ast_1.HttpScheme.BASIC:
            applyBasicAuth(context, configuration);
            break;
        case ast_1.HttpScheme.BEARER:
            applyBearerToken(context, configuration);
            break;
        case ast_1.HttpScheme.DIGEST:
            applyDigest(context, configuration);
            break;
    }
}
exports.applyHttpAuth = applyHttpAuth;
function applyBasicAuth(context, configuration) {
    context.headers[exports.AUTH_HEADER_NAME] =
        'Basic ' +
            Buffer.from(configuration.username + ":" + configuration.password).toString('base64');
}
exports.applyBasicAuth = applyBasicAuth;
function applyBearerToken(context, configuration) {
    context.headers[exports.AUTH_HEADER_NAME] = "Bearer " + configuration.token;
}
exports.applyBearerToken = applyBearerToken;
function applyDigest(_context, _configuration) {
    // TODO: groom implementation
    throw new errors_1.UnexpectedError('Not implemented');
}
exports.applyDigest = applyDigest;
//# sourceMappingURL=security.js.map