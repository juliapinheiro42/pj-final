"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = exports.createUrl = exports.NetworkErrors = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var util_1 = require("util");
var index_1 = require("../../../index");
var object_1 = require("../../../lib/object");
var errors_1 = require("../../errors");
var errors_helpers_1 = require("../../errors.helpers");
var variables_1 = require("../variables");
var interfaces_1 = require("./interfaces");
var security_1 = require("./security");
var debug = debug_1.default('superface:http');
var debugSensitive = debug_1.default('superface:http:sensitive');
debugSensitive("\nWARNING: YOU HAVE ALLOWED LOGGING SENSITIVE INFORMATION.\nTHIS LOGGING LEVEL DOES NOT PREVENT LEAKING SECRETS AND SHOULD NOT BE USED IF THE LOGS ARE GOING TO BE SHARED.\nCONSIDER DISABLING SENSITIVE INFORMATION LOGGING BY APPENDING THE DEBUG ENVIRONMENT VARIABLE WITH \",-*:sensitive\".\n");
var NetworkErrors;
(function (NetworkErrors) {
    NetworkErrors["TIMEOUT_ERROR"] = "TIMEOUT_ERROR";
})(NetworkErrors = exports.NetworkErrors || (exports.NetworkErrors = {}));
function replaceParameters(url, parameters) {
    var e_1, _a;
    var replacements = [];
    var regex = RegExp('{([^}]*)}', 'g');
    var replacement;
    while ((replacement = regex.exec(url)) !== null) {
        replacements.push(replacement[1]);
    }
    var entries = replacements.map(function (key) { return [
        key,
        variables_1.getValue(parameters, key.split('.')),
    ]; });
    var values = Object.fromEntries(entries);
    var missingKeys = replacements.filter(function (key) { return values[key] === undefined; });
    if (missingKeys.length > 0) {
        var missing = missingKeys;
        var all = replacements;
        var available = object_1.recursiveKeyList(parameters !== null && parameters !== void 0 ? parameters : {});
        throw errors_helpers_1.missingPathReplacementError(missing, url, all, available);
    }
    var stringifiedValues = variables_1.variablesToStrings(values);
    try {
        for (var _b = __values(Object.keys(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var param = _c.value;
            var replacement_1 = stringifiedValues[param];
            url = url.replace("{" + param + "}", replacement_1);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return url;
}
var createUrl = function (inputUrl, parameters) {
    var _a, _b;
    var baseUrl = replaceParameters(parameters.baseUrl, (_a = parameters.integrationParameters) !== null && _a !== void 0 ? _a : {});
    if (inputUrl === '') {
        return baseUrl;
    }
    var isRelative = /^\/[^/]/.test(inputUrl);
    if (!isRelative) {
        throw new errors_1.UnexpectedError('Expected relative url, but received absolute!');
    }
    var url = replaceParameters(inputUrl, (_b = parameters.pathParameters) !== null && _b !== void 0 ? _b : {});
    return baseUrl.replace(/\/+$/, '') + url;
};
exports.createUrl = createUrl;
var HttpClient = /** @class */ (function () {
    function HttpClient(fetchInstance) {
        this.fetchInstance = fetchInstance;
    }
    HttpClient.prototype.request = function (url, parameters) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return __awaiter(this, void 0, void 0, function () {
            var headers, request, queryAuth, requestBody, pathParameters, securityConfiguration, contextForSecurity, _loop_1, _j, _k, requirement, buffer, contentType, supportedTypes, finalUrl, hasSearchParams, searchParams, response;
            var e_2, _l;
            return __generator(this, function (_m) {
                switch (_m.label) {
                    case 0:
                        headers = variables_1.variablesToStrings(parameters === null || parameters === void 0 ? void 0 : parameters.headers);
                        headers['accept'] = parameters.accept || '*/*';
                        request = {
                            headers: headers,
                            method: parameters.method,
                        };
                        queryAuth = {};
                        requestBody = parameters.body;
                        pathParameters = __assign({}, parameters.pathParameters);
                        securityConfiguration = (_a = parameters.securityConfiguration) !== null && _a !== void 0 ? _a : [];
                        contextForSecurity = {
                            headers: headers,
                            queryAuth: queryAuth,
                            pathParameters: pathParameters,
                            requestBody: requestBody,
                        };
                        _loop_1 = function (requirement) {
                            var configuration = securityConfiguration.find(function (configuration) { return configuration.id === requirement.id; });
                            if (configuration === undefined) {
                                throw errors_helpers_1.missingSecurityValuesError(requirement.id);
                            }
                            if (configuration.type === ast_1.SecurityType.APIKEY) {
                                security_1.applyApiKeyAuth(contextForSecurity, configuration);
                            }
                            else {
                                security_1.applyHttpAuth(contextForSecurity, configuration);
                            }
                        };
                        try {
                            for (_j = __values((_b = parameters.securityRequirements) !== null && _b !== void 0 ? _b : []), _k = _j.next(); !_k.done; _k = _j.next()) {
                                requirement = _k.value;
                                _loop_1(requirement);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_k && !_k.done && (_l = _j.return)) _l.call(_j);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (parameters.body &&
                            ['post', 'put', 'patch'].includes(parameters.method.toLowerCase())) {
                            if (parameters.contentType === interfaces_1.JSON_CONTENT) {
                                (_c = headers['Content-Type']) !== null && _c !== void 0 ? _c : (headers['Content-Type'] = interfaces_1.JSON_CONTENT);
                                request.body = interfaces_1.stringBody(JSON.stringify(requestBody));
                            }
                            else if (parameters.contentType === interfaces_1.URLENCODED_CONTENT) {
                                (_d = headers['Content-Type']) !== null && _d !== void 0 ? _d : (headers['Content-Type'] = interfaces_1.URLENCODED_CONTENT);
                                request.body = interfaces_1.urlSearchParamsBody(variables_1.variablesToStrings(requestBody));
                            }
                            else if (parameters.contentType === interfaces_1.FORMDATA_CONTENT) {
                                (_e = headers['Content-Type']) !== null && _e !== void 0 ? _e : (headers['Content-Type'] = interfaces_1.FORMDATA_CONTENT);
                                request.body = interfaces_1.formDataBody(variables_1.variablesToStrings(requestBody));
                            }
                            else if (parameters.contentType &&
                                interfaces_1.BINARY_CONTENT_REGEXP.test(parameters.contentType)) {
                                (_f = headers['Content-Type']) !== null && _f !== void 0 ? _f : (headers['Content-Type'] = parameters.contentType);
                                buffer = void 0;
                                if (Buffer.isBuffer(requestBody)) {
                                    buffer = requestBody;
                                }
                                else {
                                    //coerce to string then buffer
                                    buffer = Buffer.from(String(requestBody));
                                }
                                request.body = interfaces_1.binaryBody(buffer);
                            }
                            else {
                                contentType = (_g = parameters.contentType) !== null && _g !== void 0 ? _g : '';
                                supportedTypes = __spreadArray([
                                    interfaces_1.JSON_CONTENT,
                                    interfaces_1.URLENCODED_CONTENT,
                                    interfaces_1.FORMDATA_CONTENT
                                ], __read(interfaces_1.BINARY_CONTENT_TYPES));
                                throw errors_helpers_1.unsupportedContentType(contentType, supportedTypes);
                            }
                        }
                        (_h = headers['user-agent']) !== null && _h !== void 0 ? _h : (headers['user-agent'] = index_1.USER_AGENT);
                        finalUrl = exports.createUrl(url, {
                            baseUrl: parameters.baseUrl,
                            pathParameters: pathParameters,
                            integrationParameters: parameters.integrationParameters,
                        });
                        request.queryParameters = __assign(__assign({}, variables_1.variablesToStrings(parameters.queryParameters)), queryAuth);
                        debug('Executing HTTP Call');
                        // secrets might appear in headers, url path, query parameters or body
                        if (debugSensitive.enabled) {
                            hasSearchParams = Object.keys(request.queryParameters).length > 0;
                            searchParams = new URLSearchParams(request.queryParameters);
                            debugSensitive('\t%s %s%s HTTP/1.1', request.method || 'UNKNOWN METHOD', finalUrl, hasSearchParams ? '?' + searchParams.toString() : '');
                        }
                        Object.entries(headers).forEach(function (_a) {
                            var _b = __read(_a, 2), headerName = _b[0], value = _b[1];
                            return debugSensitive("\t" + headerName + ": " + value);
                        });
                        if (requestBody !== undefined) {
                            debugSensitive("\n" + util_1.inspect(requestBody, true, 5));
                        }
                        return [4 /*yield*/, this.fetchInstance.fetch(finalUrl, request)];
                    case 1:
                        response = _m.sent();
                        debug('Received response');
                        debugSensitive("\tHTTP/1.1 " + response.status + " " + response.statusText);
                        Object.entries(response.headers).forEach(function (_a) {
                            var _b = __read(_a, 2), headerName = _b[0], value = _b[1];
                            return debugSensitive("\t" + headerName + ": " + value);
                        });
                        debugSensitive('\n\t%j', response.body);
                        return [2 /*return*/, {
                                statusCode: response.status,
                                body: response.body,
                                headers: response.headers,
                                debug: {
                                    request: {
                                        url: finalUrl,
                                        headers: headers,
                                        body: requestBody,
                                    },
                                },
                            }];
                }
            });
        });
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;
//# sourceMappingURL=http.js.map