/// <reference types="node" />
declare type StringBody = {
    _type: 'string';
    data: string;
};
declare type FormDataBody = {
    _type: 'formdata';
    data: Record<string, string>;
};
declare type BinaryBody = {
    _type: 'binary';
    data: Buffer;
};
declare type URLSearchParamsBody = {
    _type: 'urlsearchparams';
    data: Record<string, string>;
};
export declare const stringBody: (data: string) => StringBody;
export declare const formDataBody: (data: Record<string, string>) => FormDataBody;
export declare const urlSearchParamsBody: (data: Record<string, string>) => URLSearchParamsBody;
export declare const binaryBody: (data: Buffer) => BinaryBody;
export declare function isStringBody(data: FetchBody): data is StringBody;
export declare function isFormDataBody(data: FetchBody): data is FormDataBody;
export declare function isUrlSearchParamsBody(data: FetchBody): data is URLSearchParamsBody;
export declare function isBinaryBody(data: FetchBody): data is BinaryBody;
export declare type FetchBody = StringBody | FormDataBody | URLSearchParamsBody | BinaryBody;
export declare type FetchParameters = {
    headers?: Record<string, string | string[]>;
    method: string;
    body?: FetchBody;
    queryParameters?: Record<string, string>;
    timeout?: number;
};
export declare type FetchResponse = {
    status: number;
    statusText: string;
    headers: Record<string, string>;
    body?: unknown;
};
export declare type FetchInstance = {
    fetch(url: string, parameters: FetchParameters): Promise<FetchResponse>;
};
export declare const JSON_CONTENT = "application/json";
export declare const URLENCODED_CONTENT = "application/x-www-form-urlencoded";
export declare const FORMDATA_CONTENT = "multipart/form-data";
export declare const BINARY_CONTENT_TYPES: string[];
export declare const BINARY_CONTENT_REGEXP: RegExp;
export {};
