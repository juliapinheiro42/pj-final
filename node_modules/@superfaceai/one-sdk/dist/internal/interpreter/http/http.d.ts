import { HttpSecurityRequirement } from '@superfaceai/ast';
import { NonPrimitive, Variables } from '../variables';
import { FetchInstance } from './interfaces';
import { SecurityConfiguration } from './security';
export interface HttpResponse {
    statusCode: number;
    body: unknown;
    headers: Record<string, string>;
    debug: {
        request: {
            headers: Record<string, string>;
            url: string;
            body: unknown;
        };
    };
}
export declare enum NetworkErrors {
    TIMEOUT_ERROR = "TIMEOUT_ERROR"
}
export declare const createUrl: (inputUrl: string, parameters: {
    baseUrl: string;
    pathParameters?: NonPrimitive | undefined;
    integrationParameters?: Record<string, string> | undefined;
}) => string;
export declare class HttpClient {
    private fetchInstance;
    constructor(fetchInstance: FetchInstance);
    request(url: string, parameters: {
        method: string;
        headers?: Variables;
        queryParameters?: Variables;
        body?: Variables;
        contentType?: string;
        accept?: string;
        securityRequirements?: HttpSecurityRequirement[];
        securityConfiguration?: SecurityConfiguration[];
        baseUrl: string;
        pathParameters?: NonPrimitive;
        integrationParameters?: Record<string, string>;
    }): Promise<HttpResponse>;
}
