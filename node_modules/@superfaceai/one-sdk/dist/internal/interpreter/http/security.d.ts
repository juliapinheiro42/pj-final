import { ApiKeySecurityScheme, ApiKeySecurityValues, BasicAuthSecurityScheme, BasicAuthSecurityValues, BearerTokenSecurityScheme, BearerTokenSecurityValues, DigestSecurityScheme, DigestSecurityValues, HttpScheme, SecurityType } from '@superfaceai/ast';
import { NonPrimitive, Variables } from '../variables';
export declare type SecurityConfiguration = (ApiKeySecurityScheme & ApiKeySecurityValues) | (BasicAuthSecurityScheme & BasicAuthSecurityValues) | (BearerTokenSecurityScheme & BearerTokenSecurityValues) | (DigestSecurityScheme & DigestSecurityValues);
export declare const AUTH_HEADER_NAME = "Authorization";
export declare type RequestContext = {
    pathParameters: NonPrimitive;
    queryAuth: Record<string, string>;
    headers: Record<string, string>;
    requestBody: Variables | undefined;
};
export declare function applyApiKeyAuthInBody(requestBody: Variables, referenceTokens: string[], apikey: string, visitedReferenceTokens?: string[]): Variables;
export declare function applyApiKeyAuth(context: RequestContext, configuration: SecurityConfiguration & {
    type: SecurityType.APIKEY;
}): void;
export declare function applyHttpAuth(context: RequestContext, configuration: SecurityConfiguration & {
    type: SecurityType.HTTP;
}): void;
export declare function applyBasicAuth(context: RequestContext, configuration: SecurityConfiguration & {
    type: SecurityType.HTTP;
    scheme: HttpScheme.BASIC;
}): void;
export declare function applyBearerToken(context: RequestContext, configuration: SecurityConfiguration & {
    type: SecurityType.HTTP;
    scheme: HttpScheme.BEARER;
}): void;
export declare function applyDigest(_context: RequestContext, _configuration: SecurityConfiguration & {
    type: SecurityType.HTTP;
    scheme: HttpScheme.DIGEST;
}): void;
