"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evalScript = exports.SCRIPT_TIMEOUT = void 0;
var debug_1 = __importDefault(require("debug"));
var vm2_1 = require("vm2");
var debug = debug_1.default('superface:sandbox');
exports.SCRIPT_TIMEOUT = 100;
function evalScript(js, variableDefinitions) {
    var vm = new vm2_1.VM({
        sandbox: __assign({}, variableDefinitions),
        compiler: 'javascript',
        wasm: false,
        eval: false,
        timeout: exports.SCRIPT_TIMEOUT,
        fixAsync: true,
    });
    // Defensively delete global objects
    // These deletions mostly don't protect, but produce "nicer" errors for the user
    vm.run("\n    'use strict'\n\n    delete global.require // Forbidden\n    delete global.process // Forbidden\n    delete global.console // Forbidden/useless\n\n    delete global.setTimeout\n    delete global.setInterval\n    delete global.setImmediate\n    delete global.clearTimeout\n    delete global.clearInterval\n    delete global.clearImmediate\n    // delete global.String\n    // delete global.Number\n    // delete global.Buffer\n    // delete global.Boolean\n    // delete global.Array\n    // delete global.Date\n    // delete global.RegExp // Forbidden - needed for object literals to work, weirdly\n    delete global.Function // Can be restored by taking .constructor of any function, but the VM protection kicks in\n    // delete global.Object\n    delete global.VMError // Useless\n    delete global.Proxy // Forbidden\n    delete global.Reflect // Forbidden\n    // delete global.Promise // Forbidden, also VM protection - BUT needed for object literals to work, weirdly\n    delete global.Symbol // Forbidden\n\n    delete global.eval // Forbidden, also VM protects\n    delete global.WebAssembly // Forbidden, also VM protects\n    delete global.AsyncFunction // Forbidden, also VM protects\n    delete global.SharedArrayBuffer // Just in case\n    ");
    debug('Evaluating:', js);
    var result = vm.run("'use strict';const vmResult = " + js + ";vmResult");
    debug('Result:', result);
    return result;
}
exports.evalScript = evalScript;
//# sourceMappingURL=sandbox.js.map