"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
var ast_1 = require("@superfaceai/ast");
var parser_1 = require("@superfaceai/parser");
var fs_1 = require("fs");
var path_1 = require("path");
var config_1 = require("../config");
var io_1 = require("../lib/io");
var errors_1 = require("./errors");
var Parser = /** @class */ (function () {
    function Parser() {
    }
    Parser.parseMap = function (input, fileName, info) {
        return __awaiter(this, void 0, void 0, function () {
            var sourceChecksum, cachePath, path, parsedMap, parserAstVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sourceChecksum = new parser_1.Source(input, fileName).checksum();
                        cachePath = path_1.join.apply(void 0, __spreadArray([config_1.Config.instance().cachePath], __read(__spreadArray(__spreadArray([], __read((info.scope !== undefined ? [info.scope] : []))), [info.profileName]))));
                        path = path_1.join(cachePath, "" + info.providerName + ast_1.EXTENSIONS.map.build);
                        // If we have valid map in memory cache, just return it
                        if (this.mapCache[path] !== undefined &&
                            ast_1.isMapDocumentNode(this.mapCache[path]) &&
                            this.mapCache[path].astMetadata.sourceChecksum === sourceChecksum) {
                            return [2 /*return*/, this.mapCache[path]];
                        }
                        return [4 /*yield*/, Parser.loadCached(path, ast_1.isMapDocumentNode, this.mapCache, new parser_1.Source(input, fileName).checksum())];
                    case 1:
                        parsedMap = _a.sent();
                        if (parsedMap !== undefined) {
                            return [2 /*return*/, parsedMap];
                        }
                        // If not, delete old parsed maps
                        return [4 /*yield*/, Parser.clearFileCache(path)];
                    case 2:
                        // If not, delete old parsed maps
                        _a.sent();
                        // And write parsed file to cache
                        parsedMap = parser_1.parseMap(new parser_1.Source(input, fileName));
                        if (!ast_1.isMapDocumentNode(parsedMap)) {
                            parserAstVersion = parser_1.PARSED_AST_VERSION.major + "." + parser_1.PARSED_AST_VERSION.minor + "." + parser_1.PARSED_AST_VERSION.patch + (parser_1.PARSED_AST_VERSION.label ? '-' + parser_1.PARSED_AST_VERSION.label : '');
                            throw new errors_1.UnexpectedError("Parsed map is not valid. This can be caused by not matching versions of package @superfaceai/ast.\nVersion of AST in Parser used to parse map: " + parserAstVersion + ".\nVersion of AST used to validation: " + ast_1.VERSION);
                        }
                        return [4 /*yield*/, Parser.writeFileCache(parsedMap, this.mapCache, cachePath, path)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, parsedMap];
                }
            });
        });
    };
    Parser.parseProfile = function (input, fileName, info) {
        return __awaiter(this, void 0, void 0, function () {
            var sourceChecksum, cachePath, path, parsedProfile, parserAstVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sourceChecksum = new parser_1.Source(input, fileName).checksum();
                        cachePath = path_1.join.apply(void 0, __spreadArray([config_1.Config.instance().cachePath], __read(__spreadArray([], __read((info.scope !== undefined ? [info.scope] : []))))));
                        path = path_1.join(cachePath, "" + info.profileName + ast_1.EXTENSIONS.profile.build);
                        // If we have it in memory cache, just return it
                        if (this.profileCache[path] !== undefined &&
                            ast_1.isProfileDocumentNode(this.profileCache[path]) &&
                            this.profileCache[path].astMetadata.sourceChecksum === sourceChecksum) {
                            return [2 /*return*/, this.profileCache[path]];
                        }
                        return [4 /*yield*/, Parser.loadCached(path, ast_1.isProfileDocumentNode, this.profileCache, sourceChecksum)];
                    case 1:
                        parsedProfile = _a.sent();
                        // If we have cached AST, we can use it.
                        if (parsedProfile !== undefined) {
                            return [2 /*return*/, parsedProfile];
                        }
                        // If not, delete old parsed profiles
                        return [4 /*yield*/, Parser.clearFileCache(path)];
                    case 2:
                        // If not, delete old parsed profiles
                        _a.sent();
                        // And write parsed file to cache
                        parsedProfile = parser_1.parseProfile(new parser_1.Source(input, fileName));
                        if (!ast_1.isProfileDocumentNode(parsedProfile)) {
                            parserAstVersion = parser_1.PARSED_AST_VERSION.major + "." + parser_1.PARSED_AST_VERSION.minor + "." + parser_1.PARSED_AST_VERSION.patch + (parser_1.PARSED_AST_VERSION.label ? '-' + parser_1.PARSED_AST_VERSION.label : '');
                            throw new errors_1.UnexpectedError("Parsed profile is not valid. This can be caused by not matching versions of package @superfaceai/ast.\nVersion of AST in Parser used to parse profile: " + parserAstVersion + ".\nVersion of AST used to validation: " + ast_1.VERSION);
                        }
                        return [4 /*yield*/, this.writeFileCache(parsedProfile, this.profileCache, cachePath, path)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, parsedProfile];
                }
            });
        });
    };
    Parser.clearCache = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.mapCache = {};
                        this.profileCache = {};
                        return [4 /*yield*/, io_1.isAccessible(config_1.Config.instance().cachePath)];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 3];
                        return [4 /*yield*/, fs_1.promises.rm(config_1.Config.instance().cachePath, { recursive: true })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Parser.loadCached = function (path, guard, cache, sourceHash) {
        return __awaiter(this, void 0, void 0, function () {
            var fileExists, e_1, loaded, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        fileExists = false;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fs_1.promises.stat(path)];
                    case 2:
                        fileExists = (_c.sent()).isFile();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _c.sent();
                        void e_1;
                        return [3 /*break*/, 4];
                    case 4:
                        if (!fileExists) {
                            return [2 /*return*/, undefined];
                        }
                        _b = (_a = JSON).parse;
                        return [4 /*yield*/, fs_1.promises.readFile(path, { encoding: 'utf8' })];
                    case 5:
                        loaded = _b.apply(_a, [_c.sent()]);
                        //Check if valid type
                        if (!guard(loaded)) {
                            return [2 /*return*/, undefined];
                        }
                        //Check if checksum match
                        if (loaded.astMetadata.sourceChecksum !== sourceHash) {
                            return [2 /*return*/, undefined];
                        }
                        cache[path] = loaded;
                        return [2 /*return*/, loaded];
                }
            });
        });
    };
    Parser.clearFileCache = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, file, e_2_1, e_3;
            var e_2, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 10, , 11]);
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 7, 8, 9]);
                        return [4 /*yield*/, fs_1.promises.readdir(path)];
                    case 2:
                        _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();
                        _d.label = 3;
                    case 3:
                        if (!!_b.done) return [3 /*break*/, 6];
                        file = _b.value;
                        return [4 /*yield*/, fs_1.promises.unlink(path_1.join(path, file))];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_2_1 = _d.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        e_3 = _d.sent();
                        void e_3;
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    Parser.writeFileCache = function (node, cache, cachePath, filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache[filePath] = node;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fs_1.promises.mkdir(cachePath, { recursive: true })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, fs_1.promises.writeFile(filePath, JSON.stringify(node))];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_4 = _a.sent();
                        // Fail silently as the cache is strictly speaking unnecessary
                        void e_4;
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Parser.mapCache = {};
    Parser.profileCache = {};
    return Parser;
}());
exports.Parser = Parser;
//# sourceMappingURL=parser.js.map