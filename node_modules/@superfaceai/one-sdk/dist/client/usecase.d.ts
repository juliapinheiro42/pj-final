import { MapInterpreterError, ProfileParameterError } from '../internal';
import { NonPrimitive, Variables } from '../internal/interpreter/variables';
import { Result } from '../lib';
import { Events, Interceptable, InterceptableMetadata } from '../lib/events';
import { ProfileBase } from './profile';
import { Provider } from './provider';
export declare type PerformOptions = {
    provider?: Provider | string;
    parameters?: Record<string, string>;
};
export declare type PerformError = ProfileParameterError | MapInterpreterError;
declare class UseCaseBase implements Interceptable {
    readonly profile: ProfileBase;
    readonly name: string;
    metadata: InterceptableMetadata;
    events: Events;
    private boundProfileProvider;
    constructor(profile: ProfileBase, name: string);
    private bind;
    private performBoundUsecase;
    protected bindAndPerform<TInput extends NonPrimitive | undefined = Record<string, Variables | undefined>, TOutput = unknown>(input?: TInput, options?: PerformOptions): Promise<Result<TOutput, PerformError>>;
    private checkWarnFailoverMisconfiguration;
    private configureHookContext;
    protected toggleFailover(enabled: boolean): void;
    private instantiateFailurePolicy;
}
export declare class UseCase extends UseCaseBase {
    readonly profile: ProfileBase;
    readonly name: string;
    constructor(profile: ProfileBase, name: string);
    perform<TInput extends NonPrimitive | undefined = Record<string, Variables | undefined>, TOutput = unknown>(input?: TInput, options?: PerformOptions): Promise<Result<TOutput, PerformError>>;
}
export declare class TypedUseCase<TInput extends NonPrimitive | undefined, TOutput> extends UseCaseBase {
    perform(input: TInput, options?: PerformOptions): Promise<Result<TOutput, PerformError>>;
}
export {};
