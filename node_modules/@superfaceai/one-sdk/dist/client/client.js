"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeHelper = exports.createTypedClient = exports.SuperfaceClient = exports.SuperfaceClientBase = exports.invalidateSuperfaceClientCache = void 0;
var config_1 = require("../config");
var internal_1 = require("../internal");
var errors_helpers_1 = require("../internal/errors.helpers");
var events_1 = require("../lib/events");
var io_1 = require("../lib/io");
var reporter_1 = require("../lib/reporter");
var event_adapter_1 = require("./failure/event-adapter");
var profile_1 = require("./profile");
var profile_provider_1 = require("./profile-provider");
var provider_1 = require("./provider");
/**
 * Cache for loaded super.json files so that they aren't reparsed each time a new superface client is created.
 */
var SUPER_CACHE = {};
function invalidateSuperfaceClientCache() {
    SUPER_CACHE = {};
}
exports.invalidateSuperfaceClientCache = invalidateSuperfaceClientCache;
var SuperfaceClientBase = /** @class */ (function (_super) {
    __extends(SuperfaceClientBase, _super);
    function SuperfaceClientBase() {
        var _this = _super.call(this) || this;
        _this.boundCache = {};
        _this.hookContext = {};
        var superCacheKey = config_1.Config.instance().superfacePath;
        if (SUPER_CACHE[superCacheKey] === undefined) {
            SUPER_CACHE[superCacheKey] = internal_1.SuperJson.loadSync(superCacheKey).unwrap();
        }
        _this.superJson = SUPER_CACHE[superCacheKey];
        if (!config_1.Config.instance().disableReporting) {
            _this.hookMetrics();
            _this.metricReporter = new reporter_1.MetricReporter(_this.superJson);
            _this.metricReporter.reportEvent({
                eventType: 'SDKInit',
                occurredAt: new Date(),
            });
        }
        event_adapter_1.registerHooks(_this.hookContext, _this);
        return _this;
    }
    /**
     * @deprecated
     * This is not a part of the public API, DON'T USE THIS METHOD
     * Returns a BoundProfileProvider that is cached according to `profileConfig` and `providerConfig` cache keys.
     */
    SuperfaceClientBase.prototype.cacheBoundProfileProvider = function (profileConfig, providerConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var cacheKey, bound, profileProvider, boundProfileProvider;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheKey = profileConfig.cacheKey + providerConfig.cacheKey;
                        bound = this.boundCache[cacheKey];
                        if (!(bound === undefined)) return [3 /*break*/, 2];
                        profileProvider = new profile_provider_1.ProfileProvider(this.superJson, profileConfig, providerConfig, this);
                        return [4 /*yield*/, profileProvider.bind({
                                security: providerConfig.security,
                            })];
                    case 1:
                        boundProfileProvider = _a.sent();
                        this.boundCache[cacheKey] = boundProfileProvider;
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.boundCache[cacheKey]];
                }
            });
        });
    };
    /** Gets a provider from super.json based on `providerName`. */
    SuperfaceClientBase.prototype.getProvider = function (providerName) {
        return __awaiter(this, void 0, void 0, function () {
            var providerSettings;
            return __generator(this, function (_a) {
                providerSettings = this.superJson.normalized.providers[providerName];
                if (providerSettings === undefined) {
                    throw errors_helpers_1.unconfiguredProviderError(providerName);
                }
                return [2 /*return*/, new provider_1.Provider(this, new provider_1.ProviderConfiguration(providerName, providerSettings.security))];
            });
        });
    };
    /** Returns a provider configuration for when no provider is passed to untyped `.perform`. */
    SuperfaceClientBase.prototype.getProviderForProfile = function (profileId) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var priorityProviders, name_1, knownProfileProviders, name_2;
            return __generator(this, function (_d) {
                priorityProviders = ((_a = this.superJson.normalized.profiles[profileId]) === null || _a === void 0 ? void 0 : _a.priority) || [];
                if (priorityProviders.length > 0) {
                    name_1 = priorityProviders[0];
                    return [2 /*return*/, this.getProvider(name_1)];
                }
                knownProfileProviders = Object.keys((_c = (_b = this.superJson.normalized.profiles[profileId]) === null || _b === void 0 ? void 0 : _b.providers) !== null && _c !== void 0 ? _c : {});
                if (knownProfileProviders.length > 0) {
                    name_2 = knownProfileProviders[0];
                    return [2 /*return*/, this.getProvider(name_2)];
                }
                throw errors_helpers_1.noConfiguredProviderError(profileId);
            });
        });
    };
    SuperfaceClientBase.prototype.getProfileConfiguration = function (profileId) {
        return __awaiter(this, void 0, void 0, function () {
            var profileSettings, version, filePath, priority;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        profileSettings = this.superJson.normalized.profiles[profileId];
                        if (profileSettings === undefined) {
                            throw errors_helpers_1.profileNotInstalledError(profileId);
                        }
                        if (!('file' in profileSettings)) return [3 /*break*/, 2];
                        filePath = this.superJson.resolvePath(profileSettings.file);
                        return [4 /*yield*/, io_1.exists(filePath)];
                    case 1:
                        if (!(_a.sent())) {
                            throw errors_helpers_1.profileFileNotFoundError(profileSettings.file, profileId);
                        }
                        // TODO: read version from the ast?
                        version = 'unknown';
                        return [3 /*break*/, 3];
                    case 2:
                        version = profileSettings.version;
                        _a.label = 3;
                    case 3:
                        priority = profileSettings.priority;
                        if (!priority.every(function (p) { return _this.superJson.normalized.providers[p]; })) {
                            throw errors_helpers_1.unconfiguredProviderInPriorityError(profileId, priority, Object.keys(this.superJson.normalized.providers));
                        }
                        return [2 /*return*/, new profile_1.ProfileConfiguration(profileId, version)];
                }
            });
        });
    };
    SuperfaceClientBase.prototype.hookMetrics = function () {
        var _this = this;
        process.on('beforeExit', function () { var _a; return (_a = _this.metricReporter) === null || _a === void 0 ? void 0 : _a.flush(); });
        process.on('uncaughtExceptionMonitor', function () {
            console.warn('Warning: you do not handle all exceptions. This can prevent failure report to be sent.');
        });
        this.on('success', { priority: 0 }, function (context) {
            var _a;
            (_a = _this.metricReporter) === null || _a === void 0 ? void 0 : _a.reportEvent({
                eventType: 'PerformMetrics',
                profile: context.profile,
                success: true,
                provider: context.provider,
                occurredAt: context.time,
            });
            return { kind: 'continue' };
        });
        this.on('failure', { priority: 0 }, function (context) {
            var _a;
            (_a = _this.metricReporter) === null || _a === void 0 ? void 0 : _a.reportEvent({
                eventType: 'PerformMetrics',
                profile: context.profile,
                success: false,
                provider: context.provider,
                occurredAt: context.time,
            });
            return { kind: 'continue' };
        });
        this.on('provider-switch', { priority: 1000 }, function (context) {
            var _a;
            (_a = _this.metricReporter) === null || _a === void 0 ? void 0 : _a.reportEvent({
                eventType: 'ProviderChange',
                profile: context.profile,
                from: context.provider,
                to: context.toProvider,
                occurredAt: context.time,
                reasons: [{ reason: context.reason, occurredAt: context.time }],
            });
        });
    };
    return SuperfaceClientBase;
}(events_1.Events));
exports.SuperfaceClientBase = SuperfaceClientBase;
var SuperfaceClient = /** @class */ (function (_super) {
    __extends(SuperfaceClient, _super);
    function SuperfaceClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** Gets a profile from super.json based on `profileId` in format: `[scope/]name`. */
    SuperfaceClient.prototype.getProfile = function (profileId) {
        return __awaiter(this, void 0, void 0, function () {
            var profileConfiguration;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getProfileConfiguration(profileId)];
                    case 1:
                        profileConfiguration = _a.sent();
                        return [2 /*return*/, new profile_1.Profile(this, profileConfiguration)];
                }
            });
        });
    };
    return SuperfaceClient;
}(SuperfaceClientBase));
exports.SuperfaceClient = SuperfaceClient;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function createTypedClient(profileDefinitions) {
    return /** @class */ (function (_super) {
        __extends(TypedSuperfaceClientClass, _super);
        function TypedSuperfaceClientClass() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TypedSuperfaceClientClass.prototype.getProfile = function (profileId) {
            return __awaiter(this, void 0, void 0, function () {
                var profileConfiguration;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getProfileConfiguration(profileId)];
                        case 1:
                            profileConfiguration = _a.sent();
                            return [2 /*return*/, new profile_1.TypedProfile(this, profileConfiguration, Object.keys(profileDefinitions[profileId]))];
                    }
                });
            });
        };
        return TypedSuperfaceClientClass;
    }(SuperfaceClientBase));
}
exports.createTypedClient = createTypedClient;
var typeHelper = function () {
    return [undefined, undefined];
};
exports.typeHelper = typeHelper;
//# sourceMappingURL=client.js.map