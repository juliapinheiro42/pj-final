import { NonPrimitive } from '../internal/interpreter/variables';
import { SuperfaceClientBase } from './client';
import { TypedUseCase, UseCase } from './usecase';
export declare class ProfileConfiguration {
    readonly id: string;
    readonly version: string;
    constructor(id: string, version: string);
    get cacheKey(): string;
}
export declare type UsecaseType<TInput extends NonPrimitive | undefined = any, TOutput = any> = {
    [name: string]: [TInput, TOutput];
};
export declare type KnownUsecase<TUsecase extends UsecaseType> = {
    [name in keyof TUsecase]: TypedUseCase<TUsecase[name][0], TUsecase[name][1]>;
};
export declare class ProfileBase {
    readonly client: SuperfaceClientBase;
    readonly configuration: ProfileConfiguration;
    constructor(client: SuperfaceClientBase, configuration: ProfileConfiguration);
}
export declare class Profile extends ProfileBase {
    getUseCase(name: string): UseCase;
}
export declare class TypedProfile<TUsecaseTypes extends UsecaseType> extends ProfileBase {
    readonly client: SuperfaceClientBase;
    readonly configuration: ProfileConfiguration;
    private readonly knownUsecases;
    constructor(client: SuperfaceClientBase, configuration: ProfileConfiguration, usecases: (keyof TUsecaseTypes)[]);
    get useCases(): KnownUsecase<TUsecaseTypes>;
    getUseCase<TName extends keyof KnownUsecase<TUsecaseTypes>>(name: TName): KnownUsecase<TUsecaseTypes>[TName];
}
