"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedUseCase = exports.UseCase = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var errors_1 = require("../internal/errors");
var backoff_1 = require("../lib/backoff");
var events_1 = require("../lib/events");
var policies_1 = require("./failure/policies");
var debug = debug_1.default('superface:usecase');
var UseCaseBase = /** @class */ (function () {
    function UseCaseBase(profile, name) {
        this.profile = profile;
        this.name = name;
        this.metadata = {
            usecase: name,
            profile: this.profile.configuration.id,
        };
        this.events = this.profile.client;
        this.configureHookContext();
    }
    UseCaseBase.prototype.bind = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var hookRouter, providerConfig, chosenProvider, provider, provider, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        hookRouter = this.profile.client.hookContext[this.profile.configuration.id + "/" + this.name].router;
                        chosenProvider = (_a = options === null || options === void 0 ? void 0 : options.provider) !== null && _a !== void 0 ? _a : hookRouter.getCurrentProvider();
                        if (!(chosenProvider === undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.profile.client.getProviderForProfile(this.profile.configuration.id)];
                    case 1:
                        provider = _c.sent();
                        providerConfig = provider.configuration;
                        return [3 /*break*/, 5];
                    case 2:
                        if (!(typeof chosenProvider === 'string')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.profile.client.getProvider(chosenProvider)];
                    case 3:
                        provider = _c.sent();
                        providerConfig = provider.configuration;
                        return [3 /*break*/, 5];
                    case 4:
                        providerConfig = chosenProvider.configuration;
                        _c.label = 5;
                    case 5:
                        this.metadata.provider = providerConfig.name;
                        hookRouter.setCurrentProvider(providerConfig.name);
                        //In this instance we can set metadata for events
                        _b = this;
                        return [4 /*yield*/, this.profile.client.cacheBoundProfileProvider(this.profile.configuration, providerConfig)];
                    case 6:
                        //In this instance we can set metadata for events
                        _b.boundProfileProvider =
                            _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    UseCaseBase.prototype.performBoundUsecase = function (input, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.boundProfileProvider === undefined) {
                    throw new errors_1.UnexpectedError('Unreachable code reached: BoundProfileProvider is undefined.');
                }
                // TODO: rewrap the errors for public consumption?
                return [2 /*return*/, this.boundProfileProvider.perform(this.name, input, parameters)];
            });
        });
    };
    UseCaseBase.prototype.bindAndPerform = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bind(options)];
                    case 1:
                        _a.sent();
                        debug('bound provider', this.boundProfileProvider);
                        return [2 /*return*/, this.performBoundUsecase(input, options === null || options === void 0 ? void 0 : options.parameters)];
                }
            });
        });
    };
    UseCaseBase.prototype.checkWarnFailoverMisconfiguration = function () {
        var profileId = this.profile.configuration.id;
        // Check providerFailover/priority array
        var profileEntry = this.profile.client.superJson.normalized.profiles[profileId];
        if (profileEntry.defaults[this.name] === undefined) {
            return;
        }
        var failoverEnabled = profileEntry.defaults[this.name].providerFailover === true;
        var priorityEmpty = profileEntry.priority.length === 0;
        // If priority array is not empty but failover is not enable, issue a warning
        if (!priorityEmpty && !failoverEnabled) {
            console.warn("Super.json sets provider failover priority to: \"" + profileEntry.priority.join(', ') + "\" but provider failover is not allowed for usecase \"" + this.name + "\".\nTo allow provider failover please set property \"providerFailover\" in \"" + profileId + ".defaults[" + this.name + "]\" to true");
        }
        // If priority array is empty and failover is enabled, issue a warning
        if (priorityEmpty && failoverEnabled) {
            console.warn("Super.json does not set provider failover priority but provider failover is allowed for usecase \"" + this.name + "\".\nTo allow provider failover please set property \"priority\" in \"" + profileId + ".priority\".\nSetting priority according to order of providers in \"" + profileId + ".providers\"");
        }
    };
    UseCaseBase.prototype.configureHookContext = function () {
        var _this = this;
        var _a;
        this.checkWarnFailoverMisconfiguration();
        var profileId = this.profile.configuration.id;
        var profileSettings = this.profile.client.superJson.normalized.profiles[profileId];
        var key = profileId + "/" + this.name;
        if (this.profile.client.hookContext[key] === undefined) {
            this.profile.client.hookContext[key] = {
                router: new policies_1.FailurePolicyRouter(function (provider) { return _this.instantiateFailurePolicy(provider); }, 
                // Use priority only when provider failover is enabled
                ((_a = profileSettings.defaults[this.name]) === null || _a === void 0 ? void 0 : _a.providerFailover) === true
                    ? profileSettings.priority
                    : []),
                queuedAction: undefined,
            };
        }
    };
    UseCaseBase.prototype.toggleFailover = function (enabled) {
        this.profile.client.hookContext[this.profile.configuration.id + "/" + this.name].router.setAllowFailover(enabled);
    };
    UseCaseBase.prototype.instantiateFailurePolicy = function (provider) {
        var _a, _b, _c, _d, _e, _f, _g;
        var profileId = this.profile.configuration.id;
        var usecaseInfo = {
            profileId: profileId,
            usecaseName: this.name,
            // TODO: Somehow know safety
            usecaseSafety: 'unsafe',
        };
        var profileSettings = this.profile.client.superJson.normalized.profiles[profileId];
        var retryPolicyConfig = (_c = (_b = (_a = profileSettings.providers[provider]) === null || _a === void 0 ? void 0 : _a.defaults[this.name]) === null || _b === void 0 ? void 0 : _b.retryPolicy) !== null && _c !== void 0 ? _c : { kind: ast_1.OnFail.NONE };
        var policy;
        if (retryPolicyConfig.kind === ast_1.OnFail.CIRCUIT_BREAKER) {
            var backoff = undefined;
            if (((_d = retryPolicyConfig.backoff) === null || _d === void 0 ? void 0 : _d.kind) &&
                ((_e = retryPolicyConfig.backoff) === null || _e === void 0 ? void 0 : _e.kind) === ast_1.BackoffKind.EXPONENTIAL) {
                backoff = new backoff_1.ExponentialBackoff((_f = retryPolicyConfig.backoff.start) !== null && _f !== void 0 ? _f : 2000, retryPolicyConfig.backoff.factor);
            }
            policy = new policies_1.CircuitBreakerPolicy(usecaseInfo, 
            //TODO are these defauts ok?
            (_g = retryPolicyConfig.maxContiguousRetries) !== null && _g !== void 0 ? _g : 5, 30000, retryPolicyConfig.requestTimeout, backoff);
        }
        else if (retryPolicyConfig.kind === ast_1.OnFail.NONE) {
            policy = new policies_1.AbortPolicy(usecaseInfo);
        }
        else {
            throw new errors_1.UnexpectedError('Unreachable point reached.');
        }
        return policy;
    };
    var _a, _b;
    __decorate([
        events_1.eventInterceptor({ eventName: 'perform', placement: 'around' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [typeof (_a = typeof TInput !== "undefined" && TInput) === "function" ? _a : Object, Object]),
        __metadata("design:returntype", Promise)
    ], UseCaseBase.prototype, "performBoundUsecase", null);
    __decorate([
        events_1.eventInterceptor({ eventName: 'bind-and-perform', placement: 'around' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [typeof (_b = typeof TInput !== "undefined" && TInput) === "function" ? _b : Object, Object]),
        __metadata("design:returntype", Promise)
    ], UseCaseBase.prototype, "bindAndPerform", null);
    return UseCaseBase;
}());
var UseCase = /** @class */ (function (_super) {
    __extends(UseCase, _super);
    function UseCase(profile, name) {
        var _this = _super.call(this, profile, name) || this;
        _this.profile = profile;
        _this.name = name;
        return _this;
    }
    UseCase.prototype.perform = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Disable failover when user specified provider
                // needs to happen here because bindAndPerform is subject to retry from event hooks
                // including provider failover
                this.toggleFailover((options === null || options === void 0 ? void 0 : options.provider) === undefined);
                return [2 /*return*/, this.bindAndPerform(input, options)];
            });
        });
    };
    return UseCase;
}(UseCaseBase));
exports.UseCase = UseCase;
var TypedUseCase = /** @class */ (function (_super) {
    __extends(TypedUseCase, _super);
    function TypedUseCase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TypedUseCase.prototype.perform = function (input, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Disable failover when user specified provider
                // needs to happen here because bindAndPerform is subject to retry from event hooks
                // including provider failover
                this.toggleFailover((options === null || options === void 0 ? void 0 : options.provider) === undefined);
                return [2 /*return*/, this.bindAndPerform(input, options)];
            });
        });
    };
    return TypedUseCase;
}(UseCaseBase));
exports.TypedUseCase = TypedUseCase;
//# sourceMappingURL=usecase.js.map