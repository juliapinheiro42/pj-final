"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedProfile = exports.Profile = exports.ProfileBase = exports.ProfileConfiguration = void 0;
var errors_1 = require("../internal/errors");
var errors_helpers_1 = require("../internal/errors.helpers");
var usecase_1 = require("./usecase");
var ProfileConfiguration = /** @class */ (function () {
    function ProfileConfiguration(id, version) {
        this.id = id;
        this.version = version;
    }
    Object.defineProperty(ProfileConfiguration.prototype, "cacheKey", {
        get: function () {
            // TODO: Research a better way?
            return JSON.stringify(this);
        },
        enumerable: false,
        configurable: true
    });
    return ProfileConfiguration;
}());
exports.ProfileConfiguration = ProfileConfiguration;
var ProfileBase = /** @class */ (function () {
    function ProfileBase(client, configuration) {
        this.client = client;
        this.configuration = configuration;
    }
    return ProfileBase;
}());
exports.ProfileBase = ProfileBase;
var Profile = /** @class */ (function (_super) {
    __extends(Profile, _super);
    function Profile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Profile.prototype.getUseCase = function (name) {
        return new usecase_1.UseCase(this, name);
    };
    return Profile;
}(ProfileBase));
exports.Profile = Profile;
var TypedProfile = /** @class */ (function (_super) {
    __extends(TypedProfile, _super);
    function TypedProfile(client, configuration, usecases) {
        var _this = _super.call(this, client, configuration) || this;
        _this.client = client;
        _this.configuration = configuration;
        _this.knownUsecases = usecases.reduce(function (acc, usecase) {
            var _a;
            return (__assign(__assign({}, acc), (_a = {}, _a[usecase] = new usecase_1.TypedUseCase(_this, usecase), _a)));
        }, {});
        return _this;
    }
    Object.defineProperty(TypedProfile.prototype, "useCases", {
        get: function () {
            if (this.knownUsecases === undefined) {
                throw new errors_1.UnexpectedError('Thou shall not access the typed interface from untyped Profile');
            }
            else {
                return this.knownUsecases;
            }
        },
        enumerable: false,
        configurable: true
    });
    TypedProfile.prototype.getUseCase = function (name) {
        var _a;
        var usecase = (_a = this.knownUsecases) === null || _a === void 0 ? void 0 : _a[name];
        if (!usecase) {
            throw errors_helpers_1.usecaseNotFoundError(name.toString(), Object.keys(this.knownUsecases));
        }
        return usecase;
    };
    return TypedProfile;
}(ProfileBase));
exports.TypedProfile = TypedProfile;
//# sourceMappingURL=profile.js.map