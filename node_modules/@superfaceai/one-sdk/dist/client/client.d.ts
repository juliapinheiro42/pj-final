import { SuperJson } from '../internal';
import { NonPrimitive } from '../internal/interpreter/variables';
import { Events } from '../lib/events';
import { HooksContext } from './failure/event-adapter';
import { Profile, ProfileConfiguration, TypedProfile, UsecaseType } from './profile';
import { BoundProfileProvider } from './profile-provider';
import { Provider, ProviderConfiguration } from './provider';
export declare function invalidateSuperfaceClientCache(): void;
export declare abstract class SuperfaceClientBase extends Events {
    readonly superJson: SuperJson;
    private readonly metricReporter;
    private boundCache;
    hookContext: HooksContext;
    constructor();
    /**
     * @deprecated
     * This is not a part of the public API, DON'T USE THIS METHOD
     * Returns a BoundProfileProvider that is cached according to `profileConfig` and `providerConfig` cache keys.
     */
    cacheBoundProfileProvider(profileConfig: ProfileConfiguration, providerConfig: ProviderConfiguration): Promise<BoundProfileProvider>;
    /** Gets a provider from super.json based on `providerName`. */
    getProvider(providerName: string): Promise<Provider>;
    /** Returns a provider configuration for when no provider is passed to untyped `.perform`. */
    getProviderForProfile(profileId: string): Promise<Provider>;
    protected getProfileConfiguration(profileId: string): Promise<ProfileConfiguration>;
    private hookMetrics;
}
export declare class SuperfaceClient extends SuperfaceClientBase {
    /** Gets a profile from super.json based on `profileId` in format: `[scope/]name`. */
    getProfile(profileId: string): Promise<Profile>;
}
declare type ProfileUseCases<TInput extends NonPrimitive | undefined, TOutput> = {
    [profile: string]: UsecaseType<TInput, TOutput>;
};
export declare type TypedSuperfaceClient<TProfiles extends ProfileUseCases<any, any>> = SuperfaceClientBase & {
    getProfile<TProfile extends keyof TProfiles>(profileId: TProfile): Promise<TypedProfile<TProfiles[TProfile]>>;
};
export declare function createTypedClient<TProfiles extends ProfileUseCases<any, any>>(profileDefinitions: TProfiles): {
    new (): TypedSuperfaceClient<TProfiles>;
};
export declare const typeHelper: <TInput, TOutput>() => [TInput, TOutput];
export {};
