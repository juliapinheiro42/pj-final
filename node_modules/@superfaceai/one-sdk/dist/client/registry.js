"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchMapSource = exports.fetchBind = exports.fetchProviderInfo = exports.assertIsRegistryProviderInfo = void 0;
var ast_1 = require("@superfaceai/ast");
var debug_1 = __importDefault(require("debug"));
var config_1 = require("../config");
var errors_1 = require("../internal/errors");
var http_1 = require("../internal/interpreter/http");
var fetch_1 = require("../lib/fetch");
var registryDebug = debug_1.default('superface:registry');
function assertIsRegistryProviderInfo(input) {
    function isRecord(inp) {
        return typeof inp === 'object' && inp !== null;
    }
    function isDisco(inp) {
        return isRecord(inp) && 'disco' in inp;
    }
    function isRegistryProviderInfo(inp) {
        return (isRecord(inp) &&
            'url' in inp &&
            'registryId' in inp &&
            'serviceUrl' in inp &&
            'mappingUrl' in inp &&
            'semanticProfile' in inp);
    }
    if (!isDisco(input) ||
        !Array.isArray(input.disco) ||
        !input.disco.every(isRegistryProviderInfo)) {
        registryDebug('Invalid response from registry.');
        registryDebug("Received: " + JSON.stringify(input, undefined, 2));
        throw new errors_1.UnexpectedError('Invalid response from registry');
    }
}
exports.assertIsRegistryProviderInfo = assertIsRegistryProviderInfo;
function fetchProviderInfo(providerName) {
    return __awaiter(this, void 0, void 0, function () {
        function assertProperties(obj) {
            if (typeof obj !== 'object' ||
                obj === null ||
                'definition' in obj === false) {
                throw new errors_1.UnexpectedError('Registry responded with invalid body');
            }
        }
        var fetchInstance, http, sdkToken, body;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetchInstance = new fetch_1.CrossFetch();
                    http = new http_1.HttpClient(fetchInstance);
                    sdkToken = config_1.Config.instance().sdkAuthToken;
                    registryDebug("Fetching provider " + providerName + " from registry");
                    return [4 /*yield*/, http.request("/providers/" + providerName, {
                            method: 'GET',
                            headers: sdkToken
                                ? ["Authorization: SUPERFACE-SDK-TOKEN " + sdkToken]
                                : undefined,
                            baseUrl: config_1.Config.instance().superfaceApiUrl,
                            accept: 'application/json',
                            contentType: 'application/json',
                        })];
                case 1:
                    body = (_a.sent()).body;
                    assertProperties(body);
                    if (!ast_1.isProviderJson(body.definition)) {
                        throw new errors_1.UnexpectedError('Registry responded with invalid body');
                    }
                    return [2 /*return*/, body.definition];
            }
        });
    });
}
exports.fetchProviderInfo = fetchProviderInfo;
function parseBindResponse(input) {
    function assertProperties(obj) {
        if (typeof obj !== 'object' ||
            obj === null ||
            'provider' in obj === false ||
            'map_ast' in obj === false) {
            throw new errors_1.UnexpectedError('Registry responded with invalid body');
        }
    }
    assertProperties(input);
    var mapAst;
    try {
        mapAst = ast_1.assertMapDocumentNode(JSON.parse(input.map_ast));
    }
    catch (error) {
        mapAst = undefined;
    }
    return {
        provider: ast_1.assertProviderJson(input.provider),
        mapAst: mapAst,
    };
}
function fetchBind(request) {
    return __awaiter(this, void 0, void 0, function () {
        var fetchInstance, http, sdkToken, body;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetchInstance = new fetch_1.CrossFetch();
                    http = new http_1.HttpClient(fetchInstance);
                    sdkToken = config_1.Config.instance().sdkAuthToken;
                    registryDebug('Binding SDK to registry');
                    return [4 /*yield*/, http.request('/registry/bind', {
                            method: 'POST',
                            headers: sdkToken
                                ? ["Authorization: SUPERFACE-SDK-TOKEN " + sdkToken]
                                : undefined,
                            baseUrl: config_1.Config.instance().superfaceApiUrl,
                            accept: 'application/json',
                            contentType: 'application/json',
                            body: {
                                profile_id: request.profileId,
                                provider: request.provider,
                                map_variant: request.mapVariant,
                                map_revision: request.mapRevision,
                            },
                        })];
                case 1:
                    body = (_a.sent()).body;
                    return [2 /*return*/, parseBindResponse(body)];
            }
        });
    });
}
exports.fetchBind = fetchBind;
function fetchMapSource(mapId) {
    return __awaiter(this, void 0, void 0, function () {
        var fetchInstance, http, sdkToken, body;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetchInstance = new fetch_1.CrossFetch();
                    http = new http_1.HttpClient(fetchInstance);
                    sdkToken = config_1.Config.instance().sdkAuthToken;
                    registryDebug("Getting source of map: \"" + mapId + "\"");
                    return [4 /*yield*/, http.request("/" + mapId, {
                            method: 'GET',
                            headers: sdkToken
                                ? ["Authorization: SUPERFACE-SDK-TOKEN " + sdkToken]
                                : undefined,
                            baseUrl: config_1.Config.instance().superfaceApiUrl,
                            accept: 'application/vnd.superface.map',
                        })];
                case 1:
                    body = (_a.sent()).body;
                    return [2 /*return*/, body];
            }
        });
    });
}
exports.fetchMapSource = fetchMapSource;
//# sourceMappingURL=registry.js.map