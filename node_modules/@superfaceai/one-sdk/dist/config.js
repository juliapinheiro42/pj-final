"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = exports.DEFAULT_CACHE_PATH = exports.DEFAULT_METRIC_DEBOUNCE_TIME = exports.DEFAULT_SUPERFACE_PATH = exports.DEFAULT_API_URL = void 0;
var debug_1 = __importDefault(require("debug"));
var path_1 = require("path");
var configDebug = debug_1.default('superface:config');
// Environment variable names
var TOKEN_ENV_NAME = 'SUPERFACE_SDK_TOKEN';
var API_URL_ENV_NAME = 'SUPERFACE_API_URL';
var SUPERFACE_PATH_NAME = 'SUPERFACE_PATH';
var METRIC_DEBOUNCE_TIME = {
    min: 'SUPERFACE_METRIC_DEBOUNCE_TIME_MIN',
    max: 'SUPERFACE_METRIC_DEBOUNCE_TIME_MAX',
};
var DISABLE_REPORTING = 'SUPERFACE_DISABLE_METRIC_REPORTING';
// Defaults
exports.DEFAULT_API_URL = 'https://superface.ai';
exports.DEFAULT_SUPERFACE_PATH = path_1.join(process.cwd(), 'superface', 'super.json');
exports.DEFAULT_METRIC_DEBOUNCE_TIME = {
    min: 1000,
    max: 60000,
};
exports.DEFAULT_CACHE_PATH = path_1.join(process.cwd(), 'superface', '.cache');
// Extraction functions
function getSuperfaceApiUrl() {
    var envUrl = process.env[API_URL_ENV_NAME];
    return envUrl ? new URL(envUrl).href : new URL(exports.DEFAULT_API_URL).href;
}
function getSdkAuthToken() {
    var loadedToken = process.env[TOKEN_ENV_NAME];
    if (!loadedToken) {
        configDebug("Environment variable " + TOKEN_ENV_NAME + " not found");
        return;
    }
    var token = loadedToken.trim();
    var tokenRegexp = /^(sfs)_([^_]+)_([0-9A-F]{8})$/i;
    if (!tokenRegexp.test(token)) {
        configDebug("Value in environment variable " + TOKEN_ENV_NAME + " is not valid SDK authentization token");
        return;
    }
    return token;
}
function getMetricDebounceTime(which) {
    var envValue = process.env[METRIC_DEBOUNCE_TIME[which]];
    if (envValue === undefined) {
        return exports.DEFAULT_METRIC_DEBOUNCE_TIME[which];
    }
    try {
        var result = parseInt(envValue);
        if (result <= 0) {
            throw undefined;
        }
        return result;
    }
    catch (e) {
        configDebug("Invalid value: " + envValue + " for " + METRIC_DEBOUNCE_TIME[which] + ", expected positive number");
        return exports.DEFAULT_METRIC_DEBOUNCE_TIME[which];
    }
}
var Config = /** @class */ (function () {
    function Config() {
        var env = Config.loadEnv();
        this.superfaceApiUrl = env.superfaceApiUrl;
        this.sdkAuthToken = env.sdkAuthToken;
        this.superfacePath = env.superfacePath;
        this.metricDebounceTimeMin = env.metricDebounceTimeMin;
        this.metricDebounceTimeMax = env.metricDebounceTimeMax;
        this.disableReporting = env.disableReporting;
        this.cachePath = env.cachePath;
    }
    Config.instance = function () {
        if (Config._instance === undefined) {
            Config._instance = new Config();
        }
        return Config._instance;
    };
    Config.reloadFromEnv = function () {
        Config._instance = undefined;
        return Config.instance();
    };
    Config.loadEnv = function () {
        var _a;
        return {
            superfaceApiUrl: getSuperfaceApiUrl(),
            sdkAuthToken: getSdkAuthToken(),
            superfacePath: (_a = process.env[SUPERFACE_PATH_NAME]) !== null && _a !== void 0 ? _a : exports.DEFAULT_SUPERFACE_PATH,
            metricDebounceTimeMin: getMetricDebounceTime('min'),
            metricDebounceTimeMax: getMetricDebounceTime('max'),
            disableReporting: process.env.NODE_ENV === 'test'
                ? true
                : !!process.env[DISABLE_REPORTING],
            cachePath: exports.DEFAULT_CACHE_PATH,
        };
    };
    return Config;
}());
exports.Config = Config;
//# sourceMappingURL=config.js.map