"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.indexRecord = exports.recursiveKeyList = exports.isRecord = exports.clone = void 0;
var errors_1 = require("../internal/errors");
/**
 * Creates a deep clone of the value.
 */
function clone(value) {
    var e_1, _a;
    if (value === null) {
        return value;
    }
    if (value instanceof Date) {
        return new Date(value.getTime());
    }
    if (Array.isArray(value)) {
        var arrayCopy = [];
        try {
            for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var item = value_1_1.value;
                arrayCopy.push(clone(item));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return arrayCopy;
    }
    if (Buffer.isBuffer(value)) {
        return Buffer.from(value);
    }
    if (typeof value === 'object') {
        var objectCopy = Object.entries(value).map(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            return [
                key,
                clone(value),
            ];
        });
        return Object.fromEntries(objectCopy);
    }
    return value;
}
exports.clone = clone;
function isRecord(input) {
    if (typeof input !== 'object' || input === null) {
        return false;
    }
    return true;
}
exports.isRecord = isRecord;
/**
 * Recursively descends the record and returns a list of enumerable keys
 */
function recursiveKeyList(record, base) {
    var e_2, _a;
    var keys = [];
    try {
        for (var _b = __values(Object.entries(record)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            if (value === undefined) {
                continue;
            }
            var basedKey = key;
            if (base !== undefined) {
                basedKey = base + '.' + key;
            }
            keys.push(basedKey);
            if (typeof value === 'object' && value !== null) {
                keys.push.apply(keys, __spreadArray([], __read(recursiveKeyList(value, basedKey))));
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return keys;
}
exports.recursiveKeyList = recursiveKeyList;
/**
 * Recursively index into a record.
 *
 * Throws if a child cannot be indexed into.
 */
function indexRecord(input, key) {
    // check for input being undefined is for sanity only
    if (key.length === 0 || input === null || input === undefined) {
        return undefined;
    }
    if (key.length === 1) {
        return input[key[0]];
    }
    var currentKey = key.shift();
    if (currentKey === undefined) {
        throw new errors_1.UnexpectedError('unreachable');
    }
    var next = input[currentKey];
    if (!isRecord(next)) {
        throw new errors_1.UnexpectedError('Cannot index into non-object');
    }
    return indexRecord(next, key);
}
exports.indexRecord = indexRecord;
//# sourceMappingURL=object.js.map