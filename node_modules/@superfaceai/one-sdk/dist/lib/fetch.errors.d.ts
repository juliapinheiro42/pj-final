import { ErrorBase } from '../internal/errors';
interface NetworkError {
    kind: 'network';
    issue: 'unsigned-ssl' | 'dns' | 'timeout' | 'reject';
}
interface RequestError {
    kind: 'request';
    issue: 'abort' | 'timeout';
}
export declare type FetchErrorIssue = NetworkError['issue'] | RequestError['issue'];
export declare class FetchError extends ErrorBase {
    kind: string;
    issue: FetchErrorIssue;
    constructor(kind: string, issue: FetchErrorIssue);
}
export declare class NetworkFetchError extends FetchError {
    issue: NetworkError['issue'];
    constructor(issue: NetworkError['issue']);
    get normalized(): NetworkError;
}
export declare class RequestFetchError extends FetchError {
    issue: RequestError['issue'];
    constructor(issue: RequestError['issue']);
    get normalized(): RequestError;
}
export declare type CrossFetchError = NetworkFetchError | RequestFetchError;
export declare function isCrossFetchError(input: unknown): input is CrossFetchError;
export {};
